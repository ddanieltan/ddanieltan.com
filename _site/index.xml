<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ddanieltan.com</title>
<link>https://www.ddanieltan.com/</link>
<atom:link href="https://www.ddanieltan.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Sun, 31 Mar 2024 16:00:00 GMT</lastBuildDate>
<item>
  <title>Part-to-whole Chick-Fil-A Menu Items</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/30-day-chart-1/</link>
  <description><![CDATA[ 




<section id="quick-primer-on-the-30daychartchallenge" class="level1">
<h1>Quick primer on the #30DayChartChallenge</h1>
<p><img src="https://www.ddanieltan.com/posts/30-day-chart-1/30_day_chart_challenge.jpeg" class="img-fluid"></p>
<p>The #30DayChartChallenge is a data visualisation community activity that I found out via <a href="https://www.linkedin.com/company/30daychartchallenge/">Linkedin</a>. Every day for the month of April 2024 has a key word prompt (see image above). For each prompt, participants all around the world come up with an original data visualisation to share.</p>
<p>On a whim, I decided to participate in this challenge as I think it’s a great way try something new, better understand my tools and engage with a vibrant community.</p>
<p>Given that this is very much a last-minute decision, I’ll choose to use Python libraries that I am familiar with. <code>polars</code> has already completely replaced <code>pandas</code> for my data manipulation needs and <code>lets-plot</code> is one of my favourite ggplot2 ports in Python.</p>
<div id="85fe8ff8" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lets_plot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-3">LetsPlot.setup_html()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">

            <div id="uEYbt9"></div>
            <script type="text/javascript" data-lets-plot-script="library">
                if(!window.letsPlotCallQueue) {
                    window.letsPlotCallQueue = [];
                }; 
                window.letsPlotCall = function(f) {
                    window.letsPlotCallQueue.push(f);
                };
                (function() {
                    var script = document.createElement("script");
                    script.type = "text/javascript";
                    script.src = "https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.2.0/js-package/distr/lets-plot.min.js";
                    script.onload = function() {
                        window.letsPlotCall = function(f) {f();};
                        window.letsPlotCallQueue.forEach(function(f) {f();});
                        window.letsPlotCallQueue = [];
                        
                    };
                    script.onerror = function(event) {
                        window.letsPlotCall = function(f) {};    // noop
                        window.letsPlotCallQueue = [];
                        var div = document.createElement("div");
                        div.style.color = 'darkred';
                        div.textContent = 'Error loading Lets-Plot JS';
                        document.getElementById("uEYbt9").appendChild(div);
                    };
                    var e = document.getElementById("uEYbt9");
                    e.appendChild(script);
                })()
            </script>
            
</div>
</div>
</section>
<section id="data-prep" class="level1">
<h1>Data Prep</h1>
<p>I have heard rumours of Chick-Fil-A looking to open it’s 1st outlet in Singapore (<a href="https://cnalifestyle.channelnewsasia.com/dining/chick-fil-possible-singapore-outlet-opening-386521">source</a>), so I was inspired to make a visualisation to show the component parts of the major macro-nutrients - Protein, Carbohydrates and Fat for its popular menu items. I figure this should help me decide what I should spend my calories on when it first opens 😋.</p>
<p>It took a bit of a search, but as always TidyTuesdays has a suitable dataset for my needs.</p>
<div id="ac715342" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">fast_food <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pl</span>
<span id="cb2-2">    .read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-09-04/fastfood_calories.csv"</span>, ignore_errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-3">    .drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1st index column is unnamed and not required</span></span>
<span id="cb2-4">)</span></code></pre></div>
</details>
</div>
<p>I planned to create a stacked bar chart so we need to manipulate the dataframe into a tidy-longer form.</p>
<div id="5224ad17" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">chick_fil_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (fast_food</span>
<span id="cb3-2">    .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chick Fil-A"</span>)</span>
<span id="cb3-3">    .select([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_fat"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_carb"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"protein"</span>])</span>
<span id="cb3-4">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_fat'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_carb"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carbohydrates"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"protein"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Protein"</span>})</span>
<span id="cb3-5">    .melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, variable_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nutrients"</span>)</span>
<span id="cb3-6">)</span></code></pre></div>
</details>
</div>
</section>
<section id="nutrients-in-chick-fil-a-menu-items" class="level1">
<h1>Nutrients in Chick-fil-a menu items</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/30-day-chart-1/chick_fil_a_logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="150"></p>
</figure>
</div>
<div id="72245709" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lets_plot.mapping <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> as_discrete</span>
<span id="cb4-2"></span>
<span id="cb4-3">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ggplot(chick_fil_a) </span>
<span id="cb4-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_bar(</span>
<span id="cb4-5">        aes(</span>
<span id="cb4-6">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>as_discrete(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'item'</span>, order_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb4-7">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>,fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nutrients"</span>),</span>
<span id="cb4-8">            stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span></span>
<span id="cb4-9">        )</span>
<span id="cb4-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> coord_flip()</span>
<span id="cb4-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> labs(</span>
<span id="cb4-12">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb4-13">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nutrients (g)"</span>,</span>
<span id="cb4-14">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb4-15">        caption <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data: TidyTuesday 2018-09-04</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Made by: www.ddanieltan.com"</span></span>
<span id="cb4-16">        )</span>
<span id="cb4-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theme_minimal2()</span>
<span id="cb4-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scale_fill_manual({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Protein'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#3b3561'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Carbohydrates'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#E51636'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fat'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#ffc759'</span>})</span>
<span id="cb4-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theme(</span>
<span id="cb4-20">        legend_position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb4-21">        plot_caption<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey'</span>),</span>
<span id="cb4-22">        plot_margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-23">    )</span>
<span id="cb4-24">)</span>
<span id="cb4-25"></span>
<span id="cb4-26">p</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
   <div id="OfxBiF"></div>
   <script type="text/javascript" data-lets-plot-script="plot">
       (function() {
           var plotSpec={
"data":{
"item":["Chargrilled Chicken Club Sandwich","Chargrilled Chicken Sandwich","Chick-n-Slider","1 Piece Chick-n-Strips","2 Piece Chick-n-Strips","3 Piece Chick-n-Strips","4 piece Chick-n-Strips","Chicken Deluxe","4 piece Chicken Nuggets","6 piece Chicken Nuggets","8 piece Chicken Nuggets","12 piece Chicken Nuggets","30 piece Chicken Nuggets","Chicken Salad Sandwich","Chicken Sandwich","4 Piece Grilled Chicken Nuggets","6 Piece Grilled Chicken Nuggets","8 piece Grilled Chicken Nuggets","12 Piece Grilled Chicken Nuggets","Spicy Grilled Chicken Sub Sandwich","Regular Grilled Chicken Sub Sandwich","Smokehouse BBQ Bacon Sandwich","Spicy Chicken Sandwich","Spicy Deluxe","Chargrilled Chicken Cool Wrap","Chicken Enchiladas Meal Kit","Chicken Parmesan Meal Kit","Chargrilled Chicken Club Sandwich","Chargrilled Chicken Sandwich","Chick-n-Slider","1 Piece Chick-n-Strips","2 Piece Chick-n-Strips","3 Piece Chick-n-Strips","4 piece Chick-n-Strips","Chicken Deluxe","4 piece Chicken Nuggets","6 piece Chicken Nuggets","8 piece Chicken Nuggets","12 piece Chicken Nuggets","30 piece Chicken Nuggets","Chicken Salad Sandwich","Chicken Sandwich","4 Piece Grilled Chicken Nuggets","6 Piece Grilled Chicken Nuggets","8 piece Grilled Chicken Nuggets","12 Piece Grilled Chicken Nuggets","Spicy Grilled Chicken Sub Sandwich","Regular Grilled Chicken Sub Sandwich","Smokehouse BBQ Bacon Sandwich","Spicy Chicken Sandwich","Spicy Deluxe","Chargrilled Chicken Cool Wrap","Chicken Enchiladas Meal Kit","Chicken Parmesan Meal Kit","Chargrilled Chicken Club Sandwich","Chargrilled Chicken Sandwich","Chick-n-Slider","1 Piece Chick-n-Strips","2 Piece Chick-n-Strips","3 Piece Chick-n-Strips","4 piece Chick-n-Strips","Chicken Deluxe","4 piece Chicken Nuggets","6 piece Chicken Nuggets","8 piece Chicken Nuggets","12 piece Chicken Nuggets","30 piece Chicken Nuggets","Chicken Salad Sandwich","Chicken Sandwich","4 Piece Grilled Chicken Nuggets","6 Piece Grilled Chicken Nuggets","8 piece Grilled Chicken Nuggets","12 Piece Grilled Chicken Nuggets","Spicy Grilled Chicken Sub Sandwich","Regular Grilled Chicken Sub Sandwich","Smokehouse BBQ Bacon Sandwich","Spicy Chicken Sandwich","Spicy Deluxe","Chargrilled Chicken Cool Wrap","Chicken Enchiladas Meal Kit","Chicken Parmesan Meal Kit"],
"Nutrients":["Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Fat","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Carbohydrates","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein","Protein"],
"value":[16.0,6.0,11.0,6.0,12.0,17.0,23.0,23.0,6.0,9.0,12.0,18.0,46.0,19.0,19.0,2.0,3.0,4.0,5.0,12.0,13.0,18.0,19.0,25.0,14.0,47.0,31.0,37.0,36.0,26.0,6.0,13.0,22.0,29.0,42.0,5.0,7.0,9.0,14.0,35.0,55.0,40.0,1.0,2.0,2.0,3.0,47.0,48.0,46.0,41.0,43.0,29.0,70.0,65.0,37.0,29.0,16.0,11.0,22.0,28.0,37.0,31.0,14.0,21.0,28.0,41.0,103.0,28.0,28.0,13.0,19.0,25.0,38.0,33.0,34.0,33.0,29.0,34.0,37.0,39.0,48.0]
},
"mapping":{
},
"data_meta":{
},
"coord":{
"name":"flip",
"flip":true
},
"caption":{
"text":"Data: TidyTuesday 2018-09-04\nMade by: www.ddanieltan.com"
},
"theme":{
"name":"minimal2",
"legend_position":"bottom",
"plot_caption":{
"color":"grey",
"size":12.0,
"blank":false
},
"plot_margin":[20.0,50.0,10.0,0.0]
},
"kind":"plot",
"scales":[{
"name":"",
"aesthetic":"x"
},{
"name":"Nutrients (g)",
"aesthetic":"y"
},{
"name":"",
"aesthetic":"fill"
},{
"aesthetic":"fill",
"breaks":["Protein","Carbohydrates","Fat"],
"values":["#3b3561","#E51636","#ffc759"]
}],
"layers":[{
"geom":"bar",
"stat":"identity",
"mapping":{
"x":"item",
"y":"value",
"fill":"Nutrients"
},
"data_meta":{
"mapping_annotations":[{
"aes":"x",
"annotation":"as_discrete",
"parameters":{
"label":"item",
"order_by":"value",
"order":1.0
}
}]
},
"data":{
}
}],
"metainfo_list":[]
};
           var plotContainer = document.getElementById("OfxBiF");
           window.letsPlotCall(function() {{
               LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer);
           }});
       })();    
   </script>
</div>
</div>
</section>
<section id="things-i-learnt" class="level1">
<h1>Things I Learnt</h1>
<ul>
<li>Lets-plot has a unique method <code>as_discrete()</code> to reorder categorical values, analogous to <code>reorder()</code> in <code>ggplot2</code> <a href="https://lets-plot.org/python/pages/as_discrete.html">Docs</a></li>
<li>It’s really difficult to move my plot title to the left-margin of the plot instead of the axis due to the lack of a parameter like <code>ggplot2</code>’s <code>plot.title.position</code> but it’s coming soon https://github.com/JetBrains/lets-plot/issues/1027</li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2024,
  author = {Tan, Daniel},
  title = {Part-to-Whole {Chick-Fil-A} {Menu} {Items}},
  date = {2024-04-01},
  url = {https://www.ddanieltan.com/posts/30-day-chart-1},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2024" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2024. <span>“Part-to-Whole Chick-Fil-A Menu Items.”</span>
April 1, 2024. <a href="https://www.ddanieltan.com/posts/30-day-chart-1">https://www.ddanieltan.com/posts/30-day-chart-1</a>.
</div></div></section></div> ]]></description>
  <category>dataviz</category>
  <category>chart-challenge</category>
  <category>TIL</category>
  <guid>https://www.ddanieltan.com/posts/30-day-chart-1/</guid>
  <pubDate>Sun, 31 Mar 2024 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/30-day-chart-1/day1.png" medium="image" type="image/png" height="107" width="144"/>
</item>
<item>
  <title>Exercism</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/exercism/</link>
  <description><![CDATA[ 




<section id="what-is-exercism" class="level1">
<h1>What is Exercism</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/exercism/exercism.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="400"></p>
</figure>
</div>
<p><a href="https://exercism.org/">Exercism</a> is a website where you can learn how to code in a variety of programming languages. I do enjoy learning new programming languages and this site is one of my favourite places to find both instructional as well as practical content and exercises. When it comes to learning a new programming language, I’ve found that online courses can sometimes provide too much instruction without enough hands-on practice. On the other hand, <a href="https://github.com/practical-tutorials/project-based-learning">project-based learning</a> can go too far in the opposite direction, focusing heavily on practical work but lacking structure and guidance.</p>
<p>Exercism strikes a nice balance between the two extremes. It gives you just the right amount of instruction combined with coding exercises to solidify your understanding. It’s like the “Goldilocks” solution – not too much theory, not too little, but just the right mix to make the learning process enjoyable and effective.</p>
<p>Additionally, compared to other large names in this space ie. <a href="https://leetcode.com/">LeetCode</a>, I find Exercism a lot more focused on teaching you how to utilise the features of a programming language more so than how to pass the Algorithms round of coding interviews.</p>
</section>
<section id="the-exercism-cli" class="level1">
<h1>The Exercism CLI</h1>
<p>Thus far, I have been using the online code editor on Exercism as I go through the exercises but today, I learnt of the <a href="https://exercism.org/docs/using/solving-exercises/working-locally">Exercism CLI</a>. I much prefer using the CLI because:</p>
<ul>
<li>I get to use my preferred coding editor (Vscode / Neovim) where I have my familiar key bindings and Vim motions</li>
<li>I get a more immediate response when running my unit tests</li>
<li>It feels more realistic! You get written instructions that you need to understand the problem, coding stubs that you need to complete and unit tests to evaluate if your implementation is correct. This forms a minimal but realistic example of <a href="https://en.wikipedia.org/wiki/Test-driven_development">test-driven development</a>.</li>
</ul>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<ol type="1">
<li>Create an account on Exercism, navigate to your settings page and copy your authentication token to the clipboard.</li>
<li>Install the Exercism CLI with <code>brew install exercism</code></li>
<li>Specify which workspace directory you want the CLI to download problems to with <code>exercism configure -w &lt;directory&gt;</code></li>
</ol>
</section>
<section id="solving-and-submitting-exercises" class="level2">
<h2 class="anchored" data-anchor-id="solving-and-submitting-exercises">Solving and Submitting Exercises</h2>
<p>Now that we’ve covered the overall approach, you’re ready to start tackling some exercises. On Exercism, programming languages are organized into what they call <a href="https://exercism.org/tracks">Tracks</a>. Each track contains a series of coding exercises arranged from easiest to hardest. You’ll find a great selection of tracks for both popular languages and some more obscure ones. No matter how familiar I think I am with a language, I always end up learning something new from the exercises. And it’s been really cool to get exposed to languages I’d never even heard of before. The variety ensures there’s something engaging for everyone to explore.</p>
<ol type="1">
<li>Find an exercise from a Track</li>
<li>Copy the exercism cli command to download the problem. E.g. <code>exercism download --track=python --exercise=chaitanas-colossal-coaster</code></li>
<li>Navigate to your configured workspace directory and start solving! Use the provided unit tests to see if your implementation is correct. <code>pytest -v</code></li>
<li>Once all tests are passed, submit your solution with <code>exercism submit</code></li>
</ol>
</section>
<section id="learning-and-getting-feedback" class="level2">
<h2 class="anchored" data-anchor-id="learning-and-getting-feedback">Learning and getting feedback</h2>
<p>Your learning doesn’t stop after you submit an exercise solution. You can navigate back to the problem page and check out how other Exercism users approached the same exercise. I’ve lost count of how many times I’ve picked up a clever new technique or a more idiomatic way of writing code just by exploring the top-rated solutions from others.</p>
<p>But in my opinion, the <strong>killer feature</strong> of Exercism is the ability to request a code review from an actual human mentor - not a bot. Code reviews are a huge part of real software development jobs, so it’s fantastic that this platform exposes you to that process in a supportive, low-stress environment. Getting that experience early on is invaluable!</p>
<p>Hope you found this short write up useful and you give Exercism a try!</p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2024,
  author = {Tan, Daniel},
  title = {Exercism},
  date = {2024-03-16},
  url = {https://www.ddanieltan.com/posts/exercism},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2024" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2024. <span>“Exercism.”</span> March 16, 2024. <a href="https://www.ddanieltan.com/posts/exercism">https://www.ddanieltan.com/posts/exercism</a>.
</div></div></section></div> ]]></description>
  <category>learning</category>
  <guid>https://www.ddanieltan.com/posts/exercism/</guid>
  <pubDate>Fri, 15 Mar 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I like Obsidian</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/obsidian/</link>
  <description><![CDATA[ 




<section id="the-start-of-my-obsidian-journey" class="level1">
<h1>The start of my <a href="https://obsidian.md/">Obsidian</a> journey</h1>
<p>21 January 2021, that’s the date I created in my first note in my <a href="https://obsidian.md/">Obsidian</a> vault. Back then, it was just an experiment in my ongoing quest to find the perfect note-taking tool. <a href="https://evernote.com/">Evernote</a>, <a href="https://roamresearch.com/">Roam Research</a>, and even the good ol’ <a href="https://www.zebrapen.com/blogs/enlightened-writing/4-reasons-to-keep-writing-with-a-pen-and-paper">pen and paper</a> took their turns on my desk. But ever since I started using Obsidian, I never used another tool again. Since that day, Obsidian has been my constant companion through learning adventures, career changes, study sessions, and moments of personal reflection. What started as a simple app transformed into an indispensable tool, the backstage manager of my life, keeping everything in check.</p>
</section>
<section id="obsidians-features" class="level1 page-columns page-full">
<h1>Obsidian’s Features</h1>
<p>What really makes Obsidian unique? I think it boils down to 3 features:</p>
<section id="obsidian-allows-structure-to-grow-organically" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="obsidian-allows-structure-to-grow-organically">1. Obsidian allows structure to grow organically</h2>
<p>Most note-taking tools require you to decide upon the structure of your note before you record the note. For example, say I am taking notes while going through one of deeplearning.ai’s excellent <a href="https://www.deeplearning.ai/courses/generative-ai-with-llms/">Generative AI LLM courses</a>, before writing down my notes, I might have to decide on my folder structure.</p>
<p>Perhaps I should structure my notes by their topic</p>
<pre><code>├── Instruction Fine Tuning
│&nbsp;&nbsp; ├── Single Task
│&nbsp;&nbsp; └── Multi Task
├── Parameter Efficient Fine Tuning (PEFT)
├── Low Rank Adaption of LLMs (LoRA)
├── Model Evaluation Metrics
 &nbsp;&nbsp; └── LLM benchmarks</code></pre>
<p>Or perhaps I should structure my notes based by date so I can track my learning progress over time</p>
<pre><code>├── 2024-01-01
├── 2024-01-02
│&nbsp;&nbsp; └── Instruction Fine Tuning
├── 2024-01-03
│&nbsp;&nbsp; └── Parameter Efficient Fine Tuning (PEFT)
├── 2024-01-04
│&nbsp;&nbsp; └── Low Rank Adaption of LLMs (LoRA)
└── 2024-01-05</code></pre>
<p>Either way could be valid, depending on how I plan to revise and reorganise my notes in the future. But having to decide upon a structure upfront before I get the chance to start recording my notes never feels good.</p>
<section id="internal-links" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="internal-links">Internal Links</h3>
<p>Obsidian offers a powerful feature to solve this problem - <a href="https://help.obsidian.md/Linking+notes+and+files/Internal+links">Internal Links</a>. Here is an example of Internal Links in action: <img src="https://www.ddanieltan.com/posts/obsidian/internal-link-example.png" class="img-fluid"></p>
<p>By wrapping any idea/noun/topic in double <code>[[]]</code> brackets Obsidian creates a dedicated new notes for that item, as well as the connection between the note I am currently taking and the one that was just created. In this short paragraph, I have linked both a date <code>2024-01-02</code> and several key topics e.g.&nbsp;(<code>In-context learning</code>), which means that when I want to revisit or reorganise my notes, I can do so either by topic or by date.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>With internal links, I enjoy keeping my notes in a flat hierachy but I have seen vaults that still prefer folders. Obsidian supports both preferences equally well 🙂</p>
</div></div><p>This flexibility enables me to build my vault out with an organic structure that adapts to my learning needs.</p>
</section>
</section>
<section id="obsidian-helps-me-link-atomic-ideas-into-greater-understanding" class="level2">
<h2 class="anchored" data-anchor-id="obsidian-helps-me-link-atomic-ideas-into-greater-understanding">2. Obsidian helps me link atomic ideas into greater understanding</h2>
<p>Knowledge is a mosaic crafted from interconnected ideas.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">What my vault started as</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">What my vault grew into</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><img src="https://www.ddanieltan.com/posts/obsidian/graph1.png" class="img-fluid"></p>
<p>Here is the <a href="https://help.obsidian.md/Plugins/Graph+view">graph view</a> of my Obsidian vault in my 1st year. Every node in this graph is a single note. It is clear that when I was first starting out, I was writing down disparate, unconnected notes. I was probably writing down a lot of interesting ideas, but I had not taken the time to connect these ideas to gain a broader understanding.</p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p><img src="https://www.ddanieltan.com/posts/obsidian/graph2.png" class="img-fluid"></p>
<p>As I continued using Obsidian, I started to link notes together. This could be done either when the notew was first created, or when I scheduled time to review these notes again. Soon, I saw clusters of ideas organically forming into broader topics. My <a href="https://www.ddanieltan.com/posts/2022scala/">deep dive into Scala</a>, my <a href="https://www.ddanieltan.com/posts/2023-causal-inference/">exploration of Causal Inference</a> and a whole variety of subjects that interest me came out of these clusters. And today, I have a nice graphical topology of sorts that represents my learning journey and keeps me motivated.</p>
</div>
</div>
</div>
</section>
<section id="obsidians-choice-to-work-with-plain-text-files-make-it-future-proof" class="level2">
<h2 class="anchored" data-anchor-id="obsidians-choice-to-work-with-plain-text-files-make-it-future-proof">3. Obsidian’s choice to work with plain text files make it future-proof</h2>
<p>Lastly, my favourite feature of Obsidian is that by default, it chooses to work with plain text files. This simple decision means that Obsidian notes:</p>
<ul>
<li>Can be used offline</li>
<li>Can be edited with any text editor</li>
<li>Can be viewed with a variety of text readers</li>
<li>Can be easily synced on iCloud, Dropbox or using git</li>
<li>Is yours, forever!</li>
</ul>
<p>Obsidian’s CEO Steph Ango wrote a <a href="https://stephango.com/file-over-app">dedicated blog post on this philosophy</a> that went deeper into this philosophy. He shared that <em>all software is ephemeral and Obsidian wants to give people ownership over their own data</em>, which is an approach that builds trust for its users.</p>
<p><em>Edit: <a href="https://news.ycombinator.com/item?id=39027154#39027707">Hackernews discussion thread</a></em></p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->
</section>

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.2 (2023-10-31)
 os       macOS Sonoma 14.3.1
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2024-03-16
 pandoc   3.1.12.2 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.4.550

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
3 things tell a man. His eyes, his friends and his favourite quotes – Immanuel Kant
</blockquote>


</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2024,
  author = {Tan, Daniel},
  title = {Why {I} Like {Obsidian}},
  date = {2024-01-17},
  url = {https://www.ddanieltan.com/posts/obsidian},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2024" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2024. <span>“Why I Like Obsidian.”</span> January 17, 2024.
<a href="https://www.ddanieltan.com/posts/obsidian">https://www.ddanieltan.com/posts/obsidian</a>.
</div></div></section></div> ]]></description>
  <category>obsidian</category>
  <guid>https://www.ddanieltan.com/posts/obsidian/</guid>
  <pubDate>Tue, 16 Jan 2024 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/obsidian/graph2.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>My 2023 Review</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/2023-review/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/2023-review/2023.jpg" class="img-fluid figure-img"></p>
<figcaption>https://upload.wikimedia.org/wikipedia/commons/3/37/2023-01-01_new-year-illustration_by_David_Revoy.jpg</figcaption>
</figure>
</div>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>2023 was a busy year where I undertook more activities and projects than I initially planned for. Reflecting on the last day of the year, I am grateful and happy to have had a good year with my friends and family. For posterity, here are my notes of this year’s highs and lows.</p>
</section>
<section id="highlights" class="level1">
<h1>Highlights</h1>
<section id="building-organisation-habits" class="level2">
<h2 class="anchored" data-anchor-id="building-organisation-habits">Building Organisation Habits</h2>
<p>The number 1 thing I wanted to do going from 2022 to 2023 was to be more organized about everything. I am really proud of the fact that I have built personalised processes and systems that help me better manage my time, projects, finances and family commitments. These include:</p>
<ul>
<li>A workflow to journal weekly capturing my focal projects, reflections on wins, areas of improvements and moments of inspiration</li>
<li>A more accurate map of my monthly spending and investments</li>
<li>A daily personal task manager for my work and personal projects</li>
<li>Improvements in the way that I capture information for my personal knowledge graph/<a href="https://fortelabs.com/blog/basboverview/">second brain</a></li>
</ul>
</section>
<section id="work" class="level2">
<h2 class="anchored" data-anchor-id="work">Work</h2>
<p>I am lucky that there have been interesting problems to solve at work pretty much every year but given the landmark year 2023 has been for AI and LLMs, the energy at work for 2023 has felt like unlike any other. To that end, I feel that the projects I got to work on this year were particularly interesting! I am grateful to continue to be working with an incredible group of people on my team, who I learn from daily. I also received a <a href="https://www.linkedin.com/in/ddanieltan/">promotion this year</a> which was a wonderful surprise and cherished testament to the amazing support from my family, colleagues and mentors who have been with me on my career journey.</p>
</section>
<section id="travel" class="level2">
<h2 class="anchored" data-anchor-id="travel">Travel</h2>
<p>😅 It’s hard to deny that me and my wife are <a href="https://www.forbes.com/sites/geoffwhitmore/2023/10/11/what-is-revenge-travel-and-is-it-still-happening/?sh=783c07fe7cc5">revenge travellers</a>, and our 2023 was filled with many trips. Travelling is a luxury but its one of the things I enjoy very much. In particular, this year I found out that I really enjoyed travelling in a larger group. Turns out that great experiences get better when shared with friends and family.</p>
</section>
<section id="school" class="level2">
<h2 class="anchored" data-anchor-id="school">School</h2>
<p>This was my 3rd year in <a href="https://omscs.gatech.edu/">Georgia Tech’s OMSCS programme</a> and it was the most time-consuming and hardest year of curriculum. I took <a href="https://omscs.gatech.edu/cs-7641-machine-learning">Machine Learning</a> in Spring, <a href="https://omscs.gatech.edu/cs-6750-human-computer-interaction">Human-Computer Interaction</a> in Summer followed by “everyone’s favourite” <a href="https://omscs.gatech.edu/cs-6515-intro-graduate-algorithms">Graduate Algorithms</a> in Fall. It was gruelling but I made it, and I’m glad to be 1 step closer to the finish line.</p>
</section>
</section>
<section id="areas-for-improvement" class="level1">
<h1>Areas for Improvement</h1>
<section id="health" class="level2">
<h2 class="anchored" data-anchor-id="health">Health</h2>
<p>🐷 I got heavier and fatter this year. Nothing terribly drastic but it is an accurate reflection that I have indulged in unhealthy food and skipped workouts more often that I should have in 2023. I take solace that I don’t have anything more serious but I see this as 1 of the more important things I need to work on in 2024.</p>
</section>
<section id="plan-to-study-causal-inference" class="level2">
<h2 class="anchored" data-anchor-id="plan-to-study-causal-inference">Plan to study Causal Inference</h2>
<p>My plan of dedicating 2023 as my <a href="http://ddanieltan.com/posts/2023-causal-inference/">Year of Causal Inference</a> did not go as smoothly as I had planned. While I managed to work my way through a lot of material such as <a href="https://www.coursera.org/projects/essential-causal-inference-for-data-science">Coursera’s Essential Causal Inference Techniques</a>, Matthew Facure’s <a href="https://www.oreilly.com/library/view/causal-inference-in/9781098140243/">Causal Inference in Python</a> and Alex Deng’s <a href="https://alexdeng.github.io/causal/index.html">Causal Inference and It’s Applications in Online Industry</a>, I did not feel like I fully understood how to apply Causal Inference in my projects.</p>
<p>Additionally, while having a singular learning topic in <a href="https://www.ddanieltan.com/posts/2022scala-recap/">2022 to learn Scala</a> worked wonders for me, trying to apply that singular dedication to Causal Inference in 2023 when there were so many interesting advancements in AI and LLMs took away some joy of learning. Eventually, I decided to adapt and pivot my efforts let my interests dictate my learning topics and spent more time on personal LLM projects.</p>
<p>Nonetheless, I appreciate the time I spent learning about Causal Inference and while I underestimated how vast this field was this year, I look forward to when I can come back and continue my education in Causal Inference sometime in the future.</p>
</section>
<section id="writing" class="level2">
<h2 class="anchored" data-anchor-id="writing">Writing</h2>
<p>I wrote 8 blog posts in 2022 but only 2 blog posts in 2023. I have to acknowledge that I chose to prioritise work, school and other commitments over my desire to improve my writing, despite my firm belief that writing is one of the most important skills anyone needs to hone.</p>
<p>I believe I need to approach this the same way I approached how I built better organisational habits for the other areas of my life, in that, beyond giving myself a target of number of blog posts to reach, I need to consider what processes and systems can I create make writing easier and more conducive for myself. Which takes me to…</p>
</section>
</section>
<section id="my-plan-for-2024" class="level1">
<h1>My Plan for 2024</h1>
<ol type="1">
<li><p>Write more. Develop a system that helps me make writing a priority, an enjoyable activity and a sustainable habit in my life.</p></li>
<li><p>Get Healthier. The classic new year resolution but this time I have some health data to guide my progress.</p></li>
<li><p>Find a flexible learning topic that strikes a balance between focus and curiousity. I’m still pondering on what this might be.</p></li>
</ol>
<p>Overall, 2023 was another fantastic year that I am very grateful for. Hope your year was great too. Let’s look forward to 2024! 😊</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.2 (2023-10-31)
 os       macOS Sonoma 14.3.1
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2024-03-29
 pandoc   3.1.12.2 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.4.550

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
Somewhere, something incredible is waiting to be known – Carl Sagan
</blockquote>


</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2023,
  author = {Tan, Daniel},
  title = {My 2023 {Review}},
  date = {2023-12-31},
  url = {https://www.ddanieltan.com/posts/2023-review},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2023" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2023. <span>“My 2023 Review.”</span> December 31, 2023. <a href="https://www.ddanieltan.com/posts/2023-review">https://www.ddanieltan.com/posts/2023-review</a>.
</div></div></section></div> ]]></description>
  <category>learning</category>
  <category>causality</category>
  <category>yearly-review</category>
  <category>llm</category>
  <category>career</category>
  <guid>https://www.ddanieltan.com/posts/2023-review/</guid>
  <pubDate>Sat, 30 Dec 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>A Tour of Google IDX</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/google-idx/</link>
  <description><![CDATA[ 



<section id="google-idx" class="level1">
<h1>Google IDX</h1>
<p><a href="https://idx.dev/">IDX</a> is a project from Google that aims to provide an entirely cloud based app development experience. From development to deployment and everything in between can be done from the comfort of your web browser and seamlessly integrated through Google’s cloud ecosystem. While <a href="https://github.com/features/codespaces">hardly the first</a> in this space, the project piqued my interest and I signed up for beta access to give it a spin.</p>
</section>
<section id="creating-a-new-app" class="level1">
<h1>Creating a new app</h1>
<p>The onboarding experience was very smooth, my google account was required to sign up for the beta and immediately synced to my IDX account. At this stage there weren’t too many templates to choose a starter project from from the last option on the “Create A Workspace” page, it looks like <strong>Python</strong>, <strong>Go</strong> and importantly <strong>AI</strong> templates are coming soon, which I can imagine would accelerate interest in this project.</p>
<p><img src="https://www.ddanieltan.com/posts/google-idx/create-a-workspace.png" class="img-fluid"></p>
</section>
<section id="editing-experience" class="level1">
<h1>Editing Experience</h1>
<p>A couple of clicks later, I was up and running. I really enjoyed how quickly and relatively friction-less it took to get to this stage.</p>
<p><img src="https://www.ddanieltan.com/posts/google-idx/editor.png" class="img-fluid"></p>
<p>Greeted by my familiar <a href="https://microsoft.github.io/monaco-editor/">vscode/monaco editor</a>, I found navigating the options straightforward. The 2 additional icons on top of the usual vscode options you see on the sidebar to the left are for the Firebase deployment and Project IDX options.</p>
<p>Crucially, the typing experience felt natural and latency free. Coding up a simple web app was fuss-free and the default settings had quality-of-life features for web development such as instant reloading previews and a colour picker.</p>
</section>
<section id="nix" class="level1">
<h1>Nix</h1>
<p>A rather novel choice that IDX made was to use <a href="https://nixos.org/manual/nix/stable/introduction">Nix</a> as the package manager to define environment configurations for every workspace. Learning that Nix is a purely functional package manager piqued my interest as not too long ago I spent <a href="https://www.ddanieltan.com/posts/2022scala-recap/">a year learning Scala</a> At the outset, I do see a lot of sense in having a functional approach to dealing with package dependencies, but I’d love to spend more time with this tool to understand it more.</p>
<p><img src="https://www.ddanieltan.com/posts/google-idx/nix.png" class="img-fluid"></p>
<p>For my simple app, the Nix configuration was pre-populated and I could understand all the default settings made. The ability to edit the command used to preview your app defaults to the standard Python web server but can be changed for other languages if needed.</p>
</section>
<section id="python-environment" class="level1">
<h1>Python environment</h1>
<p>While the Python workspace is coming soon, seeing that Python was used as the default web server for previews got me curious to poke around a bit.</p>
<p>I found the default python version to be 3.11 but it was truly a barebones environment that did not come with pip installed. This is not too surprisingly considering every development container is a fresh VM instance. I look forward to seeing the start python environment when it becomes available as I imagine there would be more batteries included for that workspace.</p>
<p><img src="https://www.ddanieltan.com/posts/google-idx/python.png" class="img-fluid"></p>
<p>I ended my session with a quick check of the specs of the cloud machine that is provided for free. It turned out to be in-line with most basic tiers of cloud containers that I have come to expected.</p>
<p><img src="https://www.ddanieltan.com/posts/google-idx/cpu.png" class="img-fluid"></p>
</section>
<section id="overall" class="level1">
<h1>Overall</h1>
<section id="what-i-liked-so-far" class="level2">
<h2 class="anchored" data-anchor-id="what-i-liked-so-far">What I liked so far</h2>
<ul>
<li>Delivers on the promise of a convenient way to develop apps</li>
</ul>
<!-- -->
<ul>
<li><p>Classic and familiar editing experience, they resisted the urge to reinvent any wheel unnecessarily</p></li>
<li><p>Free (but I wait with bated breath to see how long this lasts)</p></li>
</ul>
</section>
<section id="what-im-looking-forward-to" class="level2">
<h2 class="anchored" data-anchor-id="what-im-looking-forward-to">What I’m looking forward to</h2>
<ul>
<li><p>Python workspace and app examples</p></li>
<li><p>AI coding assistant</p></li>
<li><p>More detailed documentation. The current docs feel a little light but we are still in beta.</p></li>
<li><p>Vim mode: I would prefer native bindings over Vim emulation offered via vscode extensions</p></li>
</ul>
<p>Overall, Project IDX impressed me in my quick testing. It was a breeze to get started and the tooling made my development experience enjoyable! My little write up is missing my review of the deployment process but that’s solely because I did not have an existing Firebase account. If I revisit this project again in the future, I’ll be sure to try that experience out too.</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->
</section>

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.2 (2023-10-31)
 os       macOS Sonoma 14.1.2
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2024-01-13
 pandoc   3.1.10 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.450

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
Somewhere, something incredible is waiting to be known – Carl Sagan
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2023,
  author = {Tan, Daniel},
  title = {A {Tour} of {Google} {IDX}},
  date = {2023-11-04},
  url = {https://www.ddanieltan.com/posts/google-idx},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2023" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2023. <span>“A Tour of Google IDX.”</span> November 4,
2023. <a href="https://www.ddanieltan.com/posts/google-idx">https://www.ddanieltan.com/posts/google-idx</a>.
</div></div></section></div> ]]></description>
  <category>tooling</category>
  <category>review</category>
  <category>webdev</category>
  <guid>https://www.ddanieltan.com/posts/google-idx/</guid>
  <pubDate>Fri, 03 Nov 2023 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/google-idx/editor.png" medium="image" type="image/png" height="69" width="144"/>
</item>
<item>
  <title>2023 Year of Causal Inference</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/2023-causal-inference/</link>
  <description><![CDATA[ 




<section id="learning-theme" class="level2">
<h2 class="anchored" data-anchor-id="learning-theme">Learning Theme</h2>
<p>It’s the start of the new year, which means I’m committing to a new learning theme for the year! I’ve found that having a single learning theme for the whole year helps keep me focused and prevents me from getting too excited about exploring new topics. It also helps me make both short- and long-term plans without stressing myself out too much, since I’m juggling my independent learning with time for my family, work, and school. As I mentioned in my <a href="https://www.ddanieltan.com/posts/2022scala/">post about my learning theme for 2022</a>, my goal is to find the right balance.</p>
<p>This year, I’m focusing on <strong>Causal Inference</strong>! 🎊 🥳 🎊 🥳 🎊 🥳</p>
</section>
<section id="what-is-causal-inference" class="level2">
<h2 class="anchored" data-anchor-id="what-is-causal-inference">What is Causal Inference?</h2>
<p>If you’ve taken a statistics class or worked in the data industry, you’ve probably heard this warning: “Correlation does not imply causation!” While this is definitely true, I’ve always wondered, “Well, what does imply causation?”</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://imgs.xkcd.com/comics/correlation.png" class="img-fluid figure-img"></p>
<figcaption>xkcd never gets old</figcaption>
</figure>
</div>
<p>When we use correlation and other measurements of association in our machine learning models, we end up with a good understanding of dependence. ML models are great at identifying patterns that link our features to outcomes, which is why they can make such accurate predictions. But even with these accurate predictions, we may not always have a clear understanding of the complex cause-and-effect forces at play in the system.</p>
<p>That’s where causal inference comes in. It’s the study of these cause-and-effect forces – not just being able to predict future outcomes, but also understanding which factors contribute and how.</p>
</section>
<section id="why-did-i-choose-causal-inference" class="level2">
<h2 class="anchored" data-anchor-id="why-did-i-choose-causal-inference">Why did I choose Causal Inference?</h2>
<section id="causal-inference-can-answer-questions-classic-experimentation-theory-cannot" class="level3">
<h3 class="anchored" data-anchor-id="causal-inference-can-answer-questions-classic-experimentation-theory-cannot">Causal Inference can answer questions classic Experimentation theory cannot</h3>
<p>At work, I’m often involved in designing online experiments using randomized control trials (also known as A/B tests), which are considered the gold standard for gathering causal inferences. But RCTs aren’t always feasible – sometimes the question we’re trying to answer requires a longer timeline, or it might be unethical to test (like the effects of smoking).</p>
<p>Outside of the clean data we get from RCTs, there’s a wealth of observational data from field experiments, surveys, and logs that we can use to draw causal inferences. There are so many interesting questions that we can generate looking at these data and causal inference could provide me new tools to my statistical toolkit to answer them.</p>
</section>
<section id="causal-inference-is-relatable-to-everyone" class="level3">
<h3 class="anchored" data-anchor-id="causal-inference-is-relatable-to-everyone">Causal Inference is relatable to everyone</h3>
<p>Second, causal inference is something that’s relevant to everyone. We all make a ton of decisions every day – from what to have for breakfast to whether we need to take an umbrella with us. A lot of these decisions are influenced by our understanding of the causal forces at play in our lives. I believe that, with the right set of skills, we can “play the hand we’re dealt” as best we can, even if we can’t change the circumstances we were born into.</p>
</section>
<section id="there-is-a-resurgence-of-materials-to-help-one-learn-causal-inference" class="level3">
<h3 class="anchored" data-anchor-id="there-is-a-resurgence-of-materials-to-help-one-learn-causal-inference">There is a resurgence of materials to help one learn Causal Inference</h3>
<p>Finally, there’s been a resurgence of materials on causal inference lately, starting with the <a href="https://www.nature.com/articles/d41586-021-02799-7#:~:text=13%20October%202021-,Nobel%2Dwinning%20'natural%20experiments'%20approach%20made%20economics%20more%20robust,and%20effect%20in%20social%20science">Nobel Prize in Economics awarded to proponents of the field in 2021</a>. There are more resources available now than ever before to help people learn about causal inference, which makes it a great time to dive in.</p>
</section>
</section>
<section id="plan-for-the-year" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="plan-for-the-year">Plan for the Year</h2>
<p>Here is my collection of study materials that I plan on using this year:</p>
<section id="structured-courses" class="level3">
<h3 class="anchored" data-anchor-id="structured-courses">Structured Courses</h3>
<p>Structured or semi-structured courses with assignments and projects are my favourite format for learning. I found <a href="https://www.coursera.org/projects/essential-causal-inference-for-data-science">Coursera’s Essential Causal Inference Techniques for Data Science</a> . This looks to be a straight-forward, short introduction to causal inference techniques to survey the landscape.</p>
</section>
<section id="materials-that-come-with-a-community" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="materials-that-come-with-a-community">Materials that come with a community</h3>
<p>These are the primary resources I plan to use, particularly because these are all resources that facilitate a community of learners either by providing a study group or video lectures. This is important to me because I enjoy have this community to learn with and learn from.</p>
<p><a href="https://mixtape.scunning.com/">Scott Cunningham’s Causal Inference Mixtape</a> is the single most recommended material on Causal Inference. You can read the free online copy or support the Prof.&nbsp;Cunningham by purchasing a print copy (links on the home page). Last year, <a href="https://community.intuitivebayes.com/c/book-club/21">Ravin Kumar organised a Causal Inference Book Club</a>, so there is a lively community of online discussions and youtube videos to study along side with.</p>
<p><a href="https://xcelab.net/rm/statistical-rethinking/">Richard McElreath’s Statistical Rethinking</a> is perhaps my favourite textbook of all time. While this material is more often billed as an introduction to Bayesian statistics, I have always found a lot of the central themes align with the pursuit of causality. The printed copy needs to be purchased but Prof.&nbsp;McElreath provides free recordings of his lectures on youtube. <a href="https://www.youtube.com/watch?v=FdnMWdICdRs&amp;list=PLDcUM9US4XdPz-KxHM4XHt7uUVGWWVSus&amp;ab_channel=RichardMcElreath">2023’s lectures</a> just began this month.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>What do you mean it’s not a thing to have a “favourite textbook”?! Everyone has one, right? Right?</p>
</div></div><p><a href="https://matheusfacure.github.io/python-causality-handbook/landing-page.html">Matheus Facure’s Causal Inference for the Brave and True</a> is another material that is on the top of many recommendations. The above 2 recommendations primarily have their code examples in R, so Matheus’s alternative with Python examples fits a nice gap. Matheus is also working on an O’Reilly book <a href="https://www.oreilly.com/library/view/causal-inference-in/9781098140243/">Causal Inference in Python</a> which I am eagerly waiting for.</p>
<p><a href="https://theeffectbook.net/">Nick Huntington-Klien’s The Effect Book</a> rounds up my list of recommended materials. The Effect Book is a comprehensive dive into causal inference paired with research design, and Dr.&nbsp;Huntington-Klien even includes an accompanying <a href="https://www.youtube.com/playlist?list=PLcTBLulJV_AK1hKtnO0-kYrU0D09K-kj8">free Youtube video series</a> along with homework assignments and source code to learn from. The online version of the book is free and you can purchase the print copy from links on its home page.</p>
</section>
<section id="materials-for-solo-studying-and-referencing" class="level3">
<h3 class="anchored" data-anchor-id="materials-for-solo-studying-and-referencing">Materials for solo studying and referencing</h3>
<p>This is a shorter list of materials that do not come with a ready online community. These are more traditional academic textbooks that I plan to peruse occasionally when referencing a gnarly topic.</p>
<ul>
<li><a href="https://mitpress.mit.edu/9780262037310/elements-of-causal-inference/#:~:text=Elements%20of%20Causal%20Inference%20is,data%20to%20understand%20the%20world.">Elements of Causal Inference</a></li>
<li><a href="https://www.amazon.com/Field-Experiments-Design-Analysis-Interpretation/dp/0393979954">Field Experiments: Design, Analysis, and Interpretation</a></li>
<li><a href="https://economics.ut.ac.ir/documents/3030266/14100645/Jeffrey_M._Wooldridge_Introductory_Econometrics_A_Modern_Approach__2012.pdf">Introductory Econometrics A Modern Approach</a></li>
</ul>
</section>
</section>
<section id="learning-by-doing" class="level2">
<h2 class="anchored" data-anchor-id="learning-by-doing">Learning by doing</h2>
<p>This is a rough draft of the type of projects I can do during this year to complement my learning.</p>
<section id="causal-inference-projects" class="level3">
<h3 class="anchored" data-anchor-id="causal-inference-projects">Causal Inference Projects</h3>
<p>I plan to work my way up from simple notebooks and exercises illustrating the usage of one of the many causal inference libraries. Eventually, being able to complete a larger analysis more akin to the type of problems I hope to address at work. I would like the opportunity to try out several different libraries from a variety of programming languages, if applicable. I bookmarked <a href="https://emilyriederer.netlify.app/post/causal-design-patterns/">Emily Riederer’s blog on Causal Design Patterns for Data Analysts</a> for reference, and I hope to be able to implement each of the patterns she describes by the end of the year.</p>
</section>
<section id="learning-about-the-causal-inference-landscape" class="level3">
<h3 class="anchored" data-anchor-id="learning-about-the-causal-inference-landscape">Learning about the Causal Inference landscape</h3>
<p>Causal Inference is a broad umbrella comprising of many professionals from a wide swathe of disciplines. Besides learning the technical methodologies, I would like to learn more about the academics, educators and practitioners that make up its global community. Prof.&nbsp;Cunningham also records a <a href="https://podcasts.apple.com/us/podcast/the-mixtape-with-scott/id1615110472">podcast interviewing several causal inference experts</a>. It might be a nice break from studying to allocate some time to listen to their stories and write a few summary posts on my blog.</p>
</section>
<section id="blogging" class="level3">
<h3 class="anchored" data-anchor-id="blogging">Blogging</h3>
<p>Which brings me to this blog! Last year, I started this blog and published 8 blog articles. I aim to publish 12 this year (mostly about Causal Inference) and share with you the learnings along my journey.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Ok, so that’s the plan! Thank you to everyone who reached out to give me suggestions on what to focus on this year. I’m brimming with excitement, onward!</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->
</section>


<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
There is no such thing as informational overload, just bad design. If something is cluttered or confusing, fix your design – Edward Tufte
</blockquote>


</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2023,
  author = {Tan, Daniel},
  title = {2023 {Year} of {Causal} {Inference}},
  date = {2023-01-06},
  url = {https://www.ddanieltan.com/posts/2023-causal-inference},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2023" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2023. <span>“2023 Year of Causal Inference.”</span> January
6, 2023. <a href="https://www.ddanieltan.com/posts/2023-causal-inference">https://www.ddanieltan.com/posts/2023-causal-inference</a>.
</div></div></section></div> ]]></description>
  <category>causality</category>
  <category>learning</category>
  <guid>https://www.ddanieltan.com/posts/2023-causal-inference/</guid>
  <pubDate>Thu, 05 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>2022 Year of Scala Recap</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/2022scala-recap/</link>
  <description><![CDATA[ 



<section id="my-year-of-scala" class="level1">
<h1>My Year of Scala</h1>
<p>In 2022, I chose the <a href="https://www.scala-lang.org/">Scala programming language</a> as my learning theme. This meant that I would use Scala in projects big and small, with a focus on understanding how I could incorporate Scala into my toolset. I shared my motivations in greater detail in an earlier blogpost <a href="https://www.ddanieltan.com/posts/2022scala/">2022: My Year in Scala</a>.</p>
<p>As we end 2022, here’s my recap and reflections on how I got to understand this programming language better and what I would recommend if you are interested to do the same.</p>
</section>
<section id="projects-i-completed-with-scala" class="level1 page-columns page-full">
<h1>Projects I completed with Scala</h1>
<p>Learning by doing has always been the most effective way to learn new things. One of the advantages to focusing on a single learning goal for an entire year is that I could pepper in both small and large Scala projects. This helped me to protect against my enthusiasm to use Scala for everything, and hopefully I avoided the classic “if all you have is a hammer, everything looks like a nail” trap. Here are some of my favourite projects that I completed with Scala:</p>
<section id="built-a-scala-application-for-work" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="built-a-scala-application-for-work">1. Built a scala application for Work</h4>
<p>My impetus to learn Scala was primarily because I had to use it at work, so I am very proud of the fact that I got sufficiently up to speed with Scala within the year to actually build a Scala application that that adds value to myself and my team 😊!</p>
<p>I won’t dive into specifics on this public platform to respect sensitive work projects. But just to get a sense, this application interacts with an enterprise-grade Spark cluster and handles an enterprise-grade volume of data. Most importantly, this application fills in a gap in our existing tooling and delivers real value for its users. The choice to use Scala for this application was perfect because there was plenty of interaction with Spark and that it fits in well with our existing codebase.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Did I mention “enterprise-grade” enough? 😆</p>
</div></div></section>
<section id="built-a-random-number-generator-for-school" class="level4">
<h4 class="anchored" data-anchor-id="built-a-random-number-generator-for-school">2. Built a Random Number Generator for School</h4>
<p>I took a course on <a href="https://omscs.gatech.edu/isye-6644-simulation-and-modeling-engineering-and-science">Simulation and Modeling</a> as part of my part-time masters programme this year. Our final project had a variety of questions and I chose to attempt one that required an implementation of one of the many Random Number Generators learnt in class.</p>
<p>I used Scala to build a <a href="https://homes.luddy.indiana.edu/kapadia/project2/node9.html">Tausworthe Generator</a> that required multiple data transformations and bitwise operations. I reflected that Scala’s Type system and ease of data transformation patterns made for such a great fit for this project.</p>
</section>
<section id="attempted-this-years-advent-of-code-in-scala" class="level4">
<h4 class="anchored" data-anchor-id="attempted-this-years-advent-of-code-in-scala">3. Attempted this year’s Advent of Code in Scala</h4>
<p>Every year, I get excited for the global coding challenge known as the <a href="https://adventofcode.com/">Advent of Code</a>. In preparation, I worked my way through the Scala solutions for 2021’s AoC and consolidated a few Scala tips in this <a href="https://www.ddanieltan.com/posts/aocscala/">blog post</a>.</p>
<p>Using Scala for 2022’s challenge was also incredibly fun! The challenge really nailed home that Scala is a high level language well-suited for the general problem solving. In particular, I really enjoyed Scala’s flexibility as it relates to using mutable/immutable data structures. While the immutability is encouraged as a default, no one bats an eyelid if you choose to use mutability on occasion, because frankly some problems in AoC are much easier to grok that way.</p>
</section>
</section>
<section id="what-i-liked-about-scala" class="level1">
<h1>What I liked about Scala</h1>
<p>After a year of trying to learn not just the syntax of the language but also appreciate its design, my favourite thing about Scala is how <strong>ergonomic</strong> it makes writing code feel.</p>
<p>Scala reminds me of several specially crafted ergonomic tools that I have come across, such as the <a href="https://eames.com/en/articles/eameschair">Eames chair</a> or the <a href="https://dvorak-keyboard.com/">Dvorak keyboard</a>. On first impression, most people find these tools strange and question why anyone would use something so different from the norm. I certainly felt that same way approaching Scala, coming from a primarily Python background. I could not understand why there was such an emphasis on the Type system, the functional patterns seemed foreign to me and I was curious why there was a small niche community that seemed so fervent in their support for this strange language.</p>
<p>I am glad I had an entire year to incorporate Scala into my daily tasks, because I eventually grew to enjoy Scala. Scala has an expressiveness that seeps into how I approach problems, and how I think about solutions. I still find reading scala code idiosyncratic at times but I also get occasional Aha moments where I appreciate the elegance of how a solution is communicated. Similar to the aforementioned designer chair and keyboard layout, once you commit to using these tools, you start to appreciate its intentional design and ergonomic benefits.</p>
<p>While its community and usage is (and probably will always be) niche, I have also found them to be welcoming and patient with new users like me! You can connect with the community primarily on the Scala Discord server or on <a href="https://www.reddit.com/r/scala/">/r/scala</a>.</p>
<p>I consider myself way too green to give a proper commentary on Scala’s core design so instead let me echo this point from <a href="https://news.ycombinator.com/item?id=26030970">Li Haoyi’s Hacker News thread about Scala</a>. Comparing programming languages is complicated, but from a distance, it truly does feel like many other languages are converging to the features Scala provides today. And, I think this says a lot about how thoughtful and well implemented the Scala language is.</p>
</section>
<section id="what-i-disliked-about-scala" class="level1">
<h1>What I disliked about Scala</h1>
<p>To keep things balanced, I also want to touch upon things I struggled with this year.</p>
<section id="tooling" class="level4">
<h4 class="anchored" data-anchor-id="tooling">1. Tooling</h4>
<p>I did not enjoy the “enterprise-grade” Scala build tool <a href="https://www.scala-sbt.org/">sbt</a>. That <code>sbt</code> once represented “Simple Build Tool” must surely be someone’s cruel joke. I remember vividly being particularly annoyed that to run a simple Hello World example, many sites wanted you to first grok <code>sbt</code>. I felt that the context switch to understand build tools in general and <code>sbt</code> in particular took my attention away from trying to learn the basics of Scala.</p>
<p>I bounced around to other build tools, such as <a href="https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html">Mill</a> but felt that outside of a handful of projects, I could not find sufficient examples particularly of simpler projects using Mill to help me better understand the tool.</p>
<p>My saving grace came later in the year when <a href="https://scala-cli.virtuslab.org/">scala-cli</a> picked up development steam. <code>scala-cli</code> is not a full fledged build tool capable of replacing <code>sbt</code>, but it was exactly the tool a beginner like me was looking for. A simple tool that allows the user to run Scala applications and occasionally handle simple packaging.</p>
<p>I’m so glad to hear scala-cli might go on to be the default way we execute scala code in the future. I think it would alleviate one of the biggest hurdles beginners have to overcome when first learning Scala.</p>
</section>
<section id="documentation" class="level4">
<h4 class="anchored" data-anchor-id="documentation">2. Documentation</h4>
<p>I’m probably spoilt by the huge amount of documentation available online for Python and its landscape of libraries. Additionally, it is not just the quantity of documentation and answers for all things Python, it is also the SEO.</p>
<p>I found it so perplexing that simply Googling a Scala library name and method often does not yield the correct documentation page I am looking for as a top result. Even after I located right ScalaDoc page, I found navigating the page difficult and discoverability for new methods poor. I sorely missed having example lines of code showing a method’s usage which is something I have gotten used to from reading documentation sites for <a href="https://pandas.pydata.org/docs/">pandas</a> or <a href="https://numpy.org/doc/stable/">numpy</a>.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>As I’m proofreading my post before publishing, I am pleased to have found that the issue with ScalaDoc’s layout is being fixed! See this <a href="https://www.reddit.com/r/scala/comments/zptt8t/a_new_reworked_scaladoc_is_here/">reddit post</a> for more info!</p>
</div>
</div>
</section>
</section>
<section id="what-i-would-recommend" class="level1">
<h1>What I Would Recommend</h1>
<p>If you are embarking on your own Scala learning journey, here are my recommendations.</p>
<section id="basics" class="level4">
<h4 class="anchored" data-anchor-id="basics">Basics</h4>
<p>The best resource I found for learning the basics of the Scala syntax is <a href="https://www.scala-exercises.org/">Scala Exercises</a>, particularly the module introducing the standard library. In there, you will find a dedicated set of explanations and interactive examples for all the key Scala language features.</p>
<p>Another great resource for learning the basics would be the official <a href="https://docs.scala-lang.org/tour/tour-of-scala.html">Tour of Scala</a>.</p>
</section>
<section id="practice" class="level4">
<h4 class="anchored" data-anchor-id="practice">Practice</h4>
<p>As mentioned above, I am a big proponent of learning through practice. So my recommendation is that once you get a good understanding of the basics, you try your hand at completing some classic programming puzzles or tasks. I am very fond of the <a href="https://adventofcode.com/">Advent of Code</a> but feel free to try your hand at other well known resources like <a href="https://projecteuler.net/">Project Euler</a> or <a href="https://leetcode.com/">Leetcode</a>.</p>
<p>I would recommend to aim to use Scala’s standard data structures to solve these puzzles. These buiding blocks are incredibly robust and powerful and are key to unlocking a lot of the ergonomy I alluded to earlier.</p>
</section>
<section id="textbooks" class="level4">
<h4 class="anchored" data-anchor-id="textbooks">Textbooks</h4>
<p>I surveyed a variety of textbooks in the year, and for the most part, all of them were good. If you’re pressed to choose, I found myself coming back again and again to <a href="https://www.handsonscala.com/">Hands-On Scala</a>. This textbook was my favourite because it had a nice variety of projects that you could incrementally build along whilst learning more about Scala and its ecosystem.</p>
</section>
<section id="tooling-1" class="level4">
<h4 class="anchored" data-anchor-id="tooling-1">Tooling</h4>
<p>For beginners, I advocate for what I consider to be the most frictionless path to get started writing Scala code:</p>
<ul>
<li>Install everything you need to write and run Scala via <a href="https://get-coursier.io/">Coursier</a></li>
<li>Use <a href="https://scala-cli.virtuslab.org/">scala-cli</a> for compiling, running and packaging Scala scripts and applications</li>
<li>Use <a href="https://code.visualstudio.com/">Vscode</a> with the <a href="https://scalameta.org/metals/">Metals extension</a> as your development environment.</li>
</ul>
<p>There are many alternatives to these technologies but you can take your time to explore them after you get started.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I had a blast in 2022 working my way through Scala! It has been one of the most interesting and rewarding learning topics I have attempted.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/2022scala-recap/scala-bonsai.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Bonsai Tree/Scala logo – https://lexica.art/prompt/e42e0aba-a2cb-42fe-b952-2abdf8431ef0)</figcaption>
</figure>
</div>
<p>As we move onward to 2023, I have no plans of dropping Scala from my toolset. Scala will remain one of my favourite languages to solve problems with. Honestly, it has pretty much become my daily driver.</p>
<p>That said, I am absolutely itching to find a new topic to sink my teeth into for 2023. Let me know if you have any suggestions for me. Happy learning everyone! 🤔🤔🤔</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.2 (2023-10-31)
 os       macOS Sonoma 14.1.2
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2024-01-01
 pandoc   3.1.10 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.450

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
If your experiment needs statistics, you ought to have done a better experiment – Ernest Rutherford
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {2022 {Year} of {Scala} {Recap}},
  date = {2022-12-31},
  url = {https://www.ddanieltan.com/posts/2022scala-recap},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“2022 Year of Scala Recap.”</span> December 31,
2022. <a href="https://www.ddanieltan.com/posts/2022scala-recap">https://www.ddanieltan.com/posts/2022scala-recap</a>.
</div></div></section></div> ]]></description>
  <category>scala</category>
  <category>learning</category>
  <category>yearly-review</category>
  <guid>https://www.ddanieltan.com/posts/2022scala-recap/</guid>
  <pubDate>Fri, 30 Dec 2022 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/2022scala-recap/scala-bonsai.png" medium="image" type="image/png" height="288" width="144"/>
</item>
<item>
  <title>2022 NormConf - My favourite talks</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/2022-normconf/</link>
  <description><![CDATA[ 



<section id="normconf" class="level1">
<h1>2022 NormConf</h1>
<p><a href="https://normconf.com/">NormConf</a> is a free, virtual tech conference created by <a href="https://vickiboykis.com/">Vicki Boykis</a> with a keen focus on all the unglamourous challenges that real-life data science practitioners encounter in their day-to-day work. In an arena where many other tech conferences focus on the latest and greatest, this conference is a breath of fresh air! I can sincerely share that I found more ideas to bring back to try at my work from this conference than any previous conference I have attended.</p>
<p><img src="https://normconf.com/images/normconf_banner.png" class="img-fluid"></p>
<p>The conference was held in a single day, split between 3 sessions and several lightning talks. Each session had about 10 speakers covering a variety of topics. All of these are available for free on <a href="https://www.youtube.com/@normconf">NormConf’s youtube channel</a>.</p>
<p>I spent the weekend catching up on all the talks and wanted to share a couple of my favourites:</p>
</section>
<section id="session-1" class="level1">
<h1>Session 1</h1>
<section id="spark-horror-stories-from-the-field-by-guenia-izquierdo" class="level2">
<h2 class="anchored" data-anchor-id="spark-horror-stories-from-the-field-by-guenia-izquierdo"><a href="https://www.youtube.com/watch?v=DxUb8gRcASg">Spark Horror Stories From The Field</a> by <a href="https://www.linkedin.com/in/guenia/">Guenia Izquierdo</a></h2>
<p>This talk right here is totally my jam. <a href="https://spark.apache.org/">Apache Spark</a> is an amazing tool. In fact, to conduct and model experiments for a large-scale business operation (like I do for work), the usage of Spark is pretty much <a href="https://en.wiktionary.org/wiki/table_stakes#:~:text=Noun,let%20alone%20ensure%20a%20win">table stakes</a>. That said, like many powerful tools, Spark is also a frustrating <a href="https://www.urbandictionary.com/define.php?term=footgun">footgun</a>.</p>
<p>Guenia shares her experience on common pitfalls you might encounter when building Spark applications for the 1st time. I found myself nodding silently as she went through every mistake that I personally faced when I first started learning Spark. Additionally, she gives useful tips explaining the implications for each Spark command you invoke which promotes a better understanding of the entire Spark framework.</p>
<p>If you are new to Spark, I have to recommend the first couple of minutes of Guenia’s talk as she provides one of the clearest and most succint crash course to Spark I have seen presented.</p>
</section>
<section id="a-game-of-construction-by-helena-sarin" class="level2">
<h2 class="anchored" data-anchor-id="a-game-of-construction-by-helena-sarin"><a href="https://www.youtube.com/watch?v=n6FUXTDNKKQ">A Game of Construction</a> by <a href="https://twitter.com/NeuralBricolage">Helena Sarin</a></h2>
<blockquote class="blockquote">
<p>Art is all a game of construction. Some with the brush, some with the shovel, some choose the pen and some of us … choose <strong>neural networks</strong></p>
</blockquote>
<p>That quote up thre is how Helena started her talk 🤯 and boy was I absolutely blown away. Describing herself as an “engineering-artist”, Helena shared details and examples of her artwork and art process. I was deeply inspired by the many similarities Helena drew between the process of refining art work with the iterative nature of building complex models.</p>
<p>I have always enjoyed the rare occasion where I get to <a href="https://www.ddanieltan.com/posts/boogiewoogie/">play with generative art</a>, and listening to a true artist’s artist share about her process was an incredible treat.</p>
</section>
</section>
<section id="session-2" class="level1 page-columns page-full">
<h1>Session 2</h1>
<section id="ml-doesnt-always-replace-rules-sometimes-they-work-together-by-jeremy-jordan" class="level2">
<h2 class="anchored" data-anchor-id="ml-doesnt-always-replace-rules-sometimes-they-work-together-by-jeremy-jordan"><a href="https://www.youtube.com/watch?v=gXe9iXNTuDc">ML doesn’t always replace rules, sometimes they work together</a> by <a href="https://twitter.com/jeremyjordan">Jeremy Jordan</a></h2>
<p>Jeremy’s talk touches upon a very real set of skills required to run machine learning solutions in a highly regulated environment such as a bank or financial institution. I really enjoyed the nuance Jeremy’s talk provides to how we can combine rules based heuristics and machine learning into a robust policy layer.</p>
<p>As with any complex solution, the talk is less of a how-to but more of a framework of discussions you should be looking to have if your team is building a solution that matches this use case.</p>
</section>
<section id="ethan-rosenthal-and-the-m1-misadventure-by-ethan-rosenthal" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ethan-rosenthal-and-the-m1-misadventure-by-ethan-rosenthal"><a href="https://www.youtube.com/watch?v=I4wkCSd7iMM">Ethan Rosenthal and the M1 Misadventure</a> by <a href="https://twitter.com/eprosenthal">Ethan Rosenthal</a></h2>
<p>Ethan’s M1 Misadventure covers all the trials and tribulations he went through to get his team’s codebase built on the new M1 Macs, and what can I say… A story about chasing obscure errors, finicky dependencies and the endless loop of upgrading/downgrading/backtracking changes just to get something work? That’s both my guilty pleasure 🍿🍿, as well as, an average work day 🥲.</p>
<p>Ethan makes sure to share some useful tips about Python environments and dependency management too if you’re looking for tips in that category. I enjoyed this talk mostly because it validates that getting that darn code to compile/run is a common problem for any data scientist.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>They don’t call it <a href="https://en.wikipedia.org/wiki/Dependency_hell">dependency hell</a> for nothing 😈😈😈</p>
</div></div></section>
</section>
<section id="session-3" class="level1 page-columns page-full">
<h1>Session 3</h1>
<section id="how-many-folds-is-too-many-efficient-simulation-for-everyday-ml-decisions-by-julia-silge" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-many-folds-is-too-many-efficient-simulation-for-everyday-ml-decisions-by-julia-silge"><a href="https://www.youtube.com/watch?v=VeLAHateMIM">How many folds is too many? Efficient simulation for everyday ML decisions</a> by <a href="https://juliasilge.com/">Julia Silge</a></h2>
<p>Whereas most of the other talks I’ve shared thus far are broadly inpsirational and entertaining, Julia’s talk is something I could bring directly back to my everyday work. Julia’s talk approaches a question that many new data science learners have but is hard to answer - When performing cross validation, how many folds is too many? And while Julia devotes a good amount of time approaching that question, what her talk really illustrates is how do you break down a question and empirically approach a solution via simulation.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>…unless you cop out with an answer like “it depends” 🙄</p>
</div></div><p>Simulation is such a powerful tool that goes beyond just the introduction of resampling and bootstraps. Simulation is a paradigm that empowers you to structure your belief of how a system works explicitly as a model, and validate those assumptions with real data. I have found so many areas of my work where approaching the thorny problem through the <a href="https://www.ddanieltan.com/posts/some2/">lens of simulation</a> has clarified my understanding of viable solutions.</p>
<p>If you have only time for 1 talk, this would be my recommendation.</p>
</section>
<section id="dont-do-invisible-work-by-chris-albon" class="level2">
<h2 class="anchored" data-anchor-id="dont-do-invisible-work-by-chris-albon"><a href="https://www.youtube.com/watch?v=HiF83i1OLOM">Don’t do invisible work</a> by <a href="https://twitter.com/chrisalbon">Chris Albon</a></h2>
<p>This is slightly nostalgic for me as Chris’s <a href="https://chrisalbon.com/">data science notes</a> was 1 of the first data science focused resource I chanced upon when first entering the field, and it felt really great to hear Chris’s talk. Chris’s talk focuses on the importance of not doing invisible work and sharing various tips on how you can systematically log the important milestones you achieved and impact for the business you have created.</p>
<p>While there is a clear connection between this talk and your career as a data scientist, I like to think that this practice of putting your work out there also has benefits from a learning angle. Reflecting on the short time I have committed to sharing articles on this blog, I can clearly see the improvement in my clarity of writing and ability to articulate ideas. Beyond the benefits to your career, ensuring you are not doing invisible work is also a very important step to <strong>take charge of your own learning</strong>.</p>
</section>
</section>
<section id="lightning-talks" class="level1">
<h1>Lightning Talks</h1>
<section id="hell-is-other-peoples-bugs-by-tj-murphy" class="level2">
<h2 class="anchored" data-anchor-id="hell-is-other-peoples-bugs-by-tj-murphy"><a href="https://www.youtube.com/watch?v=wymQT_03-H4">Hell is other people’s bugs</a> by <a href="https://twitter.com/teej_m">TJ Murphy</a></h2>
<p>TJ’s lightning talk covers all the common bugs he has seen in experimental platforms. The blind spot here is that while the statistical theory of which ever method you choose might be infallible, the implementation of said method in live experiments is not. As this is precisely the niche area of data science I work in, this talk was pretty much an instant-share for me.</p>
</section>
<section id="how-to-name-files-by-jenny-bryan" class="level2">
<h2 class="anchored" data-anchor-id="how-to-name-files-by-jenny-bryan"><a href="https://youtu.be/ES1LTlnpLMk">How to name files</a> by <a href="https://twitter.com/JennyBryan">Jenny Bryan</a></h2>
<p>If there was ever 1 topic that anyone, and yes, I mean anyone who works in tech has an opinion on, it’s about the right way of naming files. Jenny’s talk covers her recommendations (I agree with them … mostly). This talk is the one that best fits the “normcore” spirit of the entire conference, you <strong>have</strong> to watch it.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>🎉🎉 Congrats and well done to everyone who made Normconf 2022 a success! It was truly my favourite conference this year.</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
There are 2 ways of spreading light. Be the candle or the mirror that reflects it – Edith Wharton
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {2022 {NormConf} - {My} Favourite Talks},
  date = {2022-12-20},
  url = {https://www.ddanieltan.com/posts/2022-normconf},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“2022 NormConf - My Favourite Talks.”</span>
December 20, 2022. <a href="https://www.ddanieltan.com/posts/2022-normconf">https://www.ddanieltan.com/posts/2022-normconf</a>.
</div></div></section></div> ]]></description>
  <category>listicle</category>
  <category>learning</category>
  <category>spark</category>
  <category>art</category>
  <category>simulation</category>
  <guid>https://www.ddanieltan.com/posts/2022-normconf/</guid>
  <pubDate>Mon, 19 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Scala tips for Advent of Code 2022</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/aocScala/</link>
  <description><![CDATA[ 



<section id="december-is-upon-us" class="level1 page-columns page-full">
<h1>December is upon us 🎄🎅🏻🎄</h1>
<section id="the-advent-of-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-advent-of-code">The Advent of Code</h2>
<p>Every December, I get excited about a project called the <a href="https://adventofcode.com/">Advent of Code (AOC)</a>. Advent of code is a free-to-join daily coding puzzle project that starts on 1 Dec and concludes on the 25th. Each day a two-part question is released on the site to test your problem-solving skills. Many programmers all around the world enjoy solving these puzzles together in a variety of programming languages. This year, being my <a href="https://www.ddanieltan.com/2022scala">Year of Scala</a>, it should come as no surprise that I plan on using Scala as my language of choice!</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Amongst the many different programming languages used for AOC, I am always impressed by the mavericks who choose to use <a href="https://detrang1301.github.io/adventofcode-2021-excel/">Excel</a> 🤯</p>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/aocScala/aocLogo.jpeg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Source: https://thenewstack.io/advent-of-codes-programming-puzzles-set-new-global-record/</figcaption>
</figure>
</div>
</section>
<section id="scala-centers-solutions-for-2021" class="level2">
<h2 class="anchored" data-anchor-id="scala-centers-solutions-for-2021">Scala Center’s Solutions for 2021</h2>
<p>An amazing resource we have to prepare for this year’s AOC are the examples and solutions provided by Scala Center for last year’s AOC - <a href="https://scalacenter.github.io/scala-advent-of-code/">Scala Center Solutions to 2021 Advent of Code</a>. Here you can find a variety of solutions using solely Scala’s standard library and showcasing how to best use idiomatic Scala to solve common problems. In this post, I am going to share is a summary of my tips and takeaways.</p>
</section>
</section>
<section id="scala-cli-more-time-coding-less-time-fiddling" class="level1">
<h1>1. Scala-cli: More time coding, less time fiddling</h1>
<p>Among the many build tools available for Scala projects, my recommendation is <a href="https://scala-cli.virtuslab.org/">scala-cli</a>. Scala-cli is by far, the simplest tool that allows you to start solving the actual puzzles you will encounter and minimizes the time you fiddle with your project setup. You will find an easy-to-follow project structure here: https://github.com/scalacenter/scala-advent-of-code. You can install scala-cli via brew (see instructions on their website) or I typically rely on the default <a href="https://get-coursier.io/docs/cli-installation">Coursier</a> setup whose default bundle of packages includes scala-cli.</p>
</section>
<section id="case-class---the-swiss-army-knife-of-modelling-a-problem" class="level1">
<h1>2. Case class - The swiss army knife of modelling a problem</h1>
<p>How are AOC puzzles different from Leetcode? A: AOC puzzles are A LOT more verbose. Puzzles are usually described in a cute story incorporating a lot of storytelling elements which gives AOC its distinct Christmas-y flavour. But, this also means there’s just so much information to parse. One of my favourite features of Scala is the <code>case class</code> because it lends itself so well to converting the information from the question into clear and concise code.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource scala number-lines code-with-copy"><code class="sourceCode scala"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Elf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> isOldEnough<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Boolean</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> e1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Elf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> e2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Elf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> e3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Elf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Comparison operators check for equality of data instead of the instance's memory location</span></span>
<span id="cb1-10">e1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> e3 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// True</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Case classes can hold methods just like a regular class</span></span>
<span id="cb1-13">e2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>isOldEnough <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// True</span></span></code></pre></div>
</section>
<section id="be-explicit-when-using-mutability" class="level1">
<h1>3. Be explicit when using Mutability</h1>
<p>Scala has a strong sense of pragmatism. Scala encourages immutability as a default, which makes sense as it reduces a lot of unexpected side effects. But, Scala also does not force immutability on you in every circumstance. To use a mutable data structure, you can import like so.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource scala number-lines code-with-copy"><code class="sourceCode scala"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> scala<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>collection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mutable</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A mutable map with key (x,y) --&gt; value</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Map</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>Tuple2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialising the map</span></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-10">map <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// HashMap((0, 0) -&gt; 0, (1, 0) -&gt; 0, (0, 1) -&gt; 0)</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Updating values in the Map</span></span>
<span id="cb2-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-14">map <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// HashMap((0, 0) -&gt; 1, (1, 0) -&gt; 0, (0, 1) -&gt; 0)</span></span></code></pre></div>
<p>Keeping track of a map of (x,y) coordinates that correspond to a value that can change as the problem progresses is a rather common problem you will encounter. While I am sure you can still solve this problem using immutable data structures, I am glad that an option to use mutability exists. I also enjoy explicitly declaring which data structures are mutable because it reminds me to keep mutability to a minimum.</p>
</section>
<section id="use-recursion-in-place-of-repetition" class="level1">
<h1>4. Use Recursion in place of repetition</h1>
<p>In Scala, the recommendation is to use recursion in places where we need repetition. However, refactoring while loops to a recursive function used to be unintuitive for me, until I came across <a href="https://www.youtube.com/@TheAtomicmoose"><span class="citation" data-cites="Kit">@Kit</span> Langton</a>’s video.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/E8rwsxn1iTM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Once you get a hang of recursion, a lot of solutions that require you to repeat actions while waiting for a condition get a lot simpler to understand. A classic example is a search algorithm which comes up fairly often in AOC.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource scala number-lines code-with-copy"><code class="sourceCode scala"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Point</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">@scala<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>annotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tailrec</span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-5">    visited<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Set</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Point</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb3-6">    toVisit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> mutable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Point</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb3-7">    qualifiedPoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Set</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Point</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> toVisit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>isEmpty then qualifiedPoints</span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> nextPoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> toVisit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dequeue</span>
<span id="cb3-12">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> newPointsToVisit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-15">            visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Set</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>nextPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb3-16">            toVisit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> newPointsToVisit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">            qualifiedPoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Set</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>nextPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb3-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="pattern-matching---exhaustively-check-for-all-paths-your-code-can-take" class="level1">
<h1>5. Pattern matching - Exhaustively check for all paths your code can take</h1>
<p>Pattern matching in Scala is incredibly expressive and I can’t do justice to this amazing feature in a single paragraph. If you are new to Scala, be sure to learn the various ways you can pattern match from the <a href="https://docs.scala-lang.org/tour/pattern-matching.html">Scala official website</a>. Specific to the puzzles in AOC, 1 thing I love about pattern matching is that the compiler will exhaustively check for every path my code execution can take and alert me if I missed something (which happens rather often). <img src="https://www.ddanieltan.com/posts/aocScala/diagnostic.png" class="img-fluid" alt="Compiler checking for exhaustiveness"></p>
</section>
<section id="use-try-for-elegant-error-handling" class="level1">
<h1>6. Use Try for elegant error handling</h1>
<p>If you have many actions to run and some of which might throw an error, you can handle this situation elegantly by wrapping the actions in a <code>Try</code>. This converts the output to either a <code>Success</code> or <code>Failure</code> type that you can simply filter on.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource scala number-lines code-with-copy"><code class="sourceCode scala"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Seq</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb4-2">    Try <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb4-3">    Try <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List(Success(value = 2), Failure(exception = java.lang.ArithmeticException: / by zero))</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> successfulActions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> actions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>isSuccess<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List(Success(value = 2))</span></span></code></pre></div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>And, there you go! Hope these were useful tips and that I got you excited to try them out for 2022’s Advent of Code. Happy coding!</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
I am convinced the best learning takes place when the learner takes charge – Seymour Papert
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {Scala Tips for {Advent} of {Code} 2022},
  date = {2022-11-30},
  url = {https://www.ddanieltan.com/posts/aocScala},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“Scala Tips for Advent of Code 2022.”</span>
November 30, 2022. <a href="https://www.ddanieltan.com/posts/aocScala">https://www.ddanieltan.com/posts/aocScala</a>.
</div></div></section></div> ]]></description>
  <category>scala</category>
  <category>adventofcode</category>
  <guid>https://www.ddanieltan.com/posts/aocScala/</guid>
  <pubDate>Tue, 29 Nov 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Broadway Boogie Woogie</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/boogiewoogie/</link>
  <description><![CDATA[ 



<section id="lets-boogie" class="level1 page-columns page-full">
<h1>Let’s Boogie</h1>
<div class="cell" data-layout-align="center">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" data-startfrom="12" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 11;"><span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb1-13"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;button id="update"&gt;Boogie!&lt;/button&gt;</span></span>
<span id="cb1-14"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-1" data-nodetype="expression">

</div>
</div>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" data-startfrom="15" data-source-offset="-45" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 14;"><span id="cb2-15">{</span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> svgRaw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> htl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svg</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;svg&gt;&lt;/svg&gt;`</span></span>
<span id="cb2-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> svg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(svgRaw)</span>
<span id="cb2-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"background-color"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e5e4f0"</span>)</span>
<span id="cb2-21"></span>
<span id="cb2-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randomData</span>() {</span>
<span id="cb2-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>({<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> () <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb2-24">    }</span>
<span id="cb2-25"></span>
<span id="cb2-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colourMap</span>(num) {</span>
<span id="cb2-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>) { <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>}</span>
<span id="cb2-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>) { <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>}</span>
<span id="cb2-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">81</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>) {<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>}</span>
<span id="cb2-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">86</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>}</span>
<span id="cb2-31">    }</span>
<span id="cb2-32"></span>
<span id="cb2-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">horizontalStreets</span>(yPosArray) {</span>
<span id="cb2-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>yPosArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>){</span>
<span id="cb2-35">            svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horizontal"</span>)</span>
<span id="cb2-36">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randomData</span>())</span>
<span id="cb2-37">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join</span>(</span>
<span id="cb2-38">                enter <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> enter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)</span>
<span id="cb2-39">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horizontal"</span>)</span>
<span id="cb2-40">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>i) {<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>})</span>
<span id="cb2-41">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> yPosArray[i])</span>
<span id="cb2-42">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-43">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-44">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d){<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colourMap</span>(d)})</span>
<span id="cb2-45">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouseover"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d) {</span>
<span id="cb2-46">                        d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span>)</span>
<span id="cb2-47">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-48">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition</span>()</span>
<span id="cb2-49">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb2-50">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb2-51">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stroke"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb2-52">                            </span>
<span id="cb2-53">                    })</span>
<span id="cb2-54">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouseout"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d) {</span>
<span id="cb2-55">                        d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span>)</span>
<span id="cb2-56">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition</span>()</span>
<span id="cb2-57">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-58">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-59">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stroke"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-60">                    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-61">               update <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> update<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-62">               exit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove</span>()</span>
<span id="cb2-63">            )</span>
<span id="cb2-64">        }</span>
<span id="cb2-65">    }</span>
<span id="cb2-66"></span>
<span id="cb2-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verticalStreets</span>(xPosArray) {</span>
<span id="cb2-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>xPosArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>){</span>
<span id="cb2-69">            svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>)</span>
<span id="cb2-70">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randomData</span>())</span>
<span id="cb2-71">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join</span>(</span>
<span id="cb2-72">                enter <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> enter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)</span>
<span id="cb2-73">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>)</span>
<span id="cb2-74">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> xPosArray[i])</span>
<span id="cb2-75">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>i) {<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>})</span>
<span id="cb2-76">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-77">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-78">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d){<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colourMap</span>(d)})</span>
<span id="cb2-79">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouseover"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d) {</span>
<span id="cb2-80">                        d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span>)</span>
<span id="cb2-81">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-82">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition</span>()</span>
<span id="cb2-83">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb2-84">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb2-85">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stroke"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb2-86">                            </span>
<span id="cb2-87">                    })</span>
<span id="cb2-88">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouseout"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d) {</span>
<span id="cb2-89">                        d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span>)</span>
<span id="cb2-90">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition</span>()</span>
<span id="cb2-91">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-92">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-93">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stroke"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-94">                    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-95">               update <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> update<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-96">               exit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove</span>()</span>
<span id="cb2-97">            )</span>
<span id="cb2-98">            </span>
<span id="cb2-99">        }</span>
<span id="cb2-100">    }</span>
<span id="cb2-101"></span>
<span id="cb2-102">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveBlock</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i) {</span>
<span id="cb2-103">        d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span>)</span>
<span id="cb2-104">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition</span>()</span>
<span id="cb2-105">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>))</span>
<span id="cb2-106">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>))</span>
<span id="cb2-107">    }</span>
<span id="cb2-108"></span>
<span id="cb2-109">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initial draw</span></span>
<span id="cb2-110">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">horizontalStreets</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">280</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">440</span>])</span>
<span id="cb2-111">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verticalStreets</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">330</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">440</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>])</span>
<span id="cb2-112">    </span>
<span id="cb2-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> blue1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-114">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-115">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-116">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-117">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-118">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-119">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-120">    </span>
<span id="cb2-121">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> blue2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-122">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-123">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-124">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>)</span>
<span id="cb2-125">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-126">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-127">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-128"></span>
<span id="cb2-129">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> blue3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-130">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-131">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb2-132">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">260</span>)</span>
<span id="cb2-133">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-134">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-135">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-136">    </span>
<span id="cb2-137">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> blue4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-138">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-139">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">380</span>)</span>
<span id="cb2-140">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb2-141">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-142">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-143">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-144"></span>
<span id="cb2-145">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> blue5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-146">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-147">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">410</span>)</span>
<span id="cb2-148">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>)</span>
<span id="cb2-149">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-150">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-151">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-152"></span>
<span id="cb2-153">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> red1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-154">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-155">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-156">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-157">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-158">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-159">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-160"></span>
<span id="cb2-161">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> red2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-162">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-163">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>)</span>
<span id="cb2-164">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-165">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-166">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb2-167">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-168"></span>
<span id="cb2-169">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> red3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-170">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-171">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-172">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">270</span>)</span>
<span id="cb2-173">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb2-174">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-175">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-176">    </span>
<span id="cb2-177">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> red4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-178">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-179">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">290</span>)</span>
<span id="cb2-180">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb2-181">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb2-182">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-183">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-184"></span>
<span id="cb2-185">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> red5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-186">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-187">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>)</span>
<span id="cb2-188">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb2-189">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-190">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>)</span>
<span id="cb2-191">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-192">    </span>
<span id="cb2-193">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> gray1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-194">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-195">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>)</span>
<span id="cb2-196">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-197">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-198">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-199">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-200"></span>
<span id="cb2-201">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> gray2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-202">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-203">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>)</span>
<span id="cb2-204">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>)</span>
<span id="cb2-205">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-206">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>)</span>
<span id="cb2-207">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-208"></span>
<span id="cb2-209">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> gray3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-210">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-211">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>)</span>
<span id="cb2-212">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">370</span>)</span>
<span id="cb2-213">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-214">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-215">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-216"></span>
<span id="cb2-217">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> gray4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-218">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-219">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">370</span>)</span>
<span id="cb2-220">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">310</span>)</span>
<span id="cb2-221">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-222">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-223">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-224"></span>
<span id="cb2-225">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> gray5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raise</span>()</span>
<span id="cb2-226">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block"</span>)</span>
<span id="cb2-227">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb2-228">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-229">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-230">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-231">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-232">   </span>
<span id="cb2-233"></span>
<span id="cb2-234">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Updated draws</span></span>
<span id="cb2-235">    d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#update"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"click"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb2-236">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">horizontalStreets</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">280</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">440</span>])</span>
<span id="cb2-237">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verticalStreets</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">330</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">440</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>])</span>
<span id="cb2-238">        d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".block"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">each</span>(moveBlock)</span>
<span id="cb2-239"></span>
<span id="cb2-240">    })</span>
<span id="cb2-241"></span>
<span id="cb2-242">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> svg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">node</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-243"></span>
<span id="cb2-244">}</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-2" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>This is a piece of digital art I created. It features bright colours, straight lines and some fun interactivity.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Try clicking the “Boogie!” button</p>
</div></div><p>You probably realize that my simple artwork is very similar to Piet Mondrian’s iconic <a href="https://en.wikipedia.org/wiki/Broadway_Boogie_Woogie">Broadway Boogie Woogie</a>. Broadway Boogie Woogie is considered one of Mondrian’s most emblematic paintings and whose aesthetic is instantly recognised all around the world. The original piece is housed today in New York’s <a href="https://www.moma.org/collection/works/78682">Museum of Modern Art (MOMA)</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Piet_Mondrian%2C_1942_-_Broadway_Boogie_Woogie.jpg/1200px-Piet_Mondrian%2C_1942_-_Broadway_Boogie_Woogie.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Piet Mondrian’s original Broadway Boogie Woogie</figcaption>
</figure>
</div>
<p>Indeed, my amateur recreation is inspired by the original Mondrian, but not directly. In fact, it’s probably more accurate to say, my art piece is a derivative of a derivative.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource default number-lines code-with-copy"><code class="sourceCode default"><span id="cb3-1">flowchart TD</span>
<span id="cb3-2">    A(Mondrian's Broadway Boogie Woogie) --&gt;|inspired| B(Tom Sach's Broadway Boogie Woogie)</span>
<span id="cb3-3">    B --&gt;|inspired| C(My Broadway Boogie Woogie)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TD
    A(Mondrian's Broadway Boogie Woogie) --&gt;|inspired| B(Tom Sach's Broadway Boogie Woogie)
    B --&gt;|inspired| C(My Broadway Boogie Woogie)
</pre>
</div>
</div>
</div>
</div>
</section>
<section id="tom-sachs" class="level1 page-columns page-full">
<h1>Tom Sachs</h1>
<p><a href="https://www.tomsachs.com/exhibitions">Tom Sachs</a> is another influential artist born of a later generation. Tom Sachs had a very special path to the world of art, working in many blue-collar jobs such as lift repairman, electrician, plumber and construction worker. As a result, he has a very special view of the relationship between working with physical materials and the art he creates. Like many, Tom Sachs was very enamoured with Mondrian’s Broadway Boogie Woogie. He liked the art piece so much, he created his own.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Tom Sachs is also credited by both <a href="https://www.youtube.com/c/Caseyneistatofficial">Casey</a> and <a href="https://www.youtube.com/c/vanneistat">Van Neistat</a> of Youtube fame as being a key inspiration for their growth as an artist.</p>
</div></div><blockquote class="instagram-media blockquote" data-instgrm-captioned="" data-instgrm-permalink="https://www.instagram.com/p/CGV2D1An6gm/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);">
<div style="padding:16px;">
<a href="https://www.instagram.com/p/CGV2D1An6gm/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank">
<div style=" display: flex; flex-direction: row; align-items: center;">
<div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;">

</div>
<div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;">
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;">

</div>
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;">

</div>
</div>
</div>
<div style="padding: 19% 0;">

</div>
<div style="display:block; height:50px; margin:0 auto 12px; width:50px;">
<svg width="50px" height="50px" viewbox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xlink="https://www.w3.org/1999/xlink">
<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g>
</svg>
</div>
<div style="padding-top: 8px;">
<div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">
View this post on Instagram
</div>
</div>
<div style="padding: 12.5% 0;">

</div>
<div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;">
<div>
<div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);">

</div>
<div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;">

</div>
<div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);">

</div>
</div>
<div style="margin-left: 8px;">
<div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;">

</div>
<div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)">

</div>
</div>
<div style="margin-left: auto;">
<div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);">

</div>
<div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);">

</div>
<div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);">

</div>
</div>
</div>
<div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;">
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;">

</div>
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;">

</div>
</div>
</a>
<p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;">
<a href="https://www.instagram.com/p/CGV2D1An6gm/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Tom Sachs (<span class="citation" data-cites="tomsachs">@tomsachs</span>)</a>
</p>
</div>
</blockquote>
<script async="" src="//www.instagram.com/embed.js"></script>
</section>
<section id="a-genuine-fake" class="level1">
<h1>A Genuine Fake</h1>
<p>Tom Sachs explains his thought process here in this <a href="https://youtu.be/cxLxwbm7FMA?t=2490">interview with Adam Savage</a> and in his <a href="https://youtu.be/V8aeaX6Kozw?t=282">Ted Talk</a>. Here are a few choice quotes:</p>
<blockquote class="blockquote">
<p>I know I spent more time and enjoyed Broadway Boogie Woogie than the person who bought it. I know I enjoyed it more because I … built one.</p>
</blockquote>
<blockquote class="blockquote">
<p>Creating my Broadway Boogie Woogie with plywood and gaffers tape, materials that I have a connection with … I am creating authenticity that meets my own standards of what’s important… It’s a Genuine Fake</p>
</blockquote>
<p>And this is the most fascinating part of the equation for me. The original art piece is beautiful but in the process of recreating the same art piece using tools that were unique to Tom Sachs, he created his Genuine Fake. It’s a <code>Fake</code> in the sense that it is not the original, but it is also <code>Genuine</code> because Tom Sachs experienced the joy of creating something unique through intense study of the original.</p>
<p>I built my Genuine Fake in hopes that I can experience the same journey. And while I am severely unfamiliar with both oil paint which was used in Mondrian’s original work and plywood used in Tom Sach’s work, I am rather familiar with digital tools and materials, so that is what I decided to use.</p>
<p>Currently, I am taking a course on <a href="https://omscs.gatech.edu/cse-6242-data-visual-analytics">Data and Visual Analytics</a>, which has a strong focus on <a href="https://d3js.org/">D3.js</a>, a javascript visualisation framework, so that is what I used to build <strong>my genuine fake</strong>.</p>
</section>
<section id="interesting-things-i-learnt-along-the-way" class="level1">
<h1>Interesting things I learnt along the way</h1>
<p>Ok, that’s enough rambling about <strong>Why</strong> I started this project, let me shift gears to list some of my learnings as I worked on <strong>How</strong> to execute this project.</p>
<section id="the-interplay-between-observablejs-d3-quarto" class="level3">
<h3 class="anchored" data-anchor-id="the-interplay-between-observablejs-d3-quarto">The Interplay between ObservableJS / D3 / Quarto</h3>
<p>Quarto, the publishing framework <a href="http://localhost:7537/posts/blogtips/">I keep raving about</a>, supports <a href="https://observablehq.com/@observablehq/observables-not-javascript">ObservableJS</a> right out of the box. ObservableJS is built by the same minds behind D3, so naturally, ObservableJS has D3 libraries preloaded.</p>
<p>To write some D3/ObservableJS code in Quarto, you simply have to create a code block like so</p>
<pre><code>```{ojs}
// This creates an SVG element.
svgRaw = htl.svg`&lt;svg&gt;&lt;/svg&gt;`

// d3 code goes here
d3.select(svgRaw)
    .attr("width",500)
    .attr("height",500)
    ...
```</code></pre>
<p>Above, you can also see some of the niceties ObservableJS brings, such as <a href="https://observablehq.com/@observablehq/htl">Hypertext Literals</a> which makes it a breeze to create HTML elements directly in the <code>{ojs}</code> code block without the need to touch the raw HTML file.</p>
</section>
<section id="easy-art-with-random-data" class="level3">
<h3 class="anchored" data-anchor-id="easy-art-with-random-data">Easy art with random data</h3>
<p>What makes the entire field of <a href="https://www.tate.org.uk/art/art-terms/g/generative-art">Generative Art</a> remarkable is how random data is transformed into art pieces. I started out my project seeking to do a pure 1-for-1 copy of the original Mondrian, so every street and block would be in the same position and of the same colour. I soon became really bored of creating a 1-for-1 copy and realized I could make a much more interesting project, simply by randomizing the data that would generate the streets and colours. It was so fun, I decided to include a button (“Boogie!”) so the user could cycle through many variants!</p>
<p>In my implementation, I relied on Javascript’s <code>Math.random()</code> random number generator, which I later learnt is pseudo uniform. D3 includes a more fleshed-out <a href="https://github.com/d3/d3-random">d3-random</a> module which exposes more functions from a greater variety of distributions. If I revisit this project again in the future, I would use the d3-random over <code>Math.random()</code>.</p>
</section>
<section id="d3s-select-enter-update-pattern" class="level3">
<h3 class="anchored" data-anchor-id="d3s-select-enter-update-pattern">D3’s Select-Enter-Update pattern</h3>
<p>D3 has a really difficult to grok <a href="https://observablehq.com/@d3/general-update-pattern">select-enter-update pattern</a>. The goal here is that once you bind your data to the visual elements of your page, following this pattern allows fine-grain control of how new items are added, existing items are updated and redundant items are removed.</p>
<p>It’s incredibly powerful but this was the hardest part of the D3 syntax for me to understand. It does not help that D3 has several versions and I feel the syntax of this pattern goes through pretty major changes in each version.</p>
</section>
<section id="transitions-and-animations-really-make-things-pop" class="level3">
<h3 class="anchored" data-anchor-id="transitions-and-animations-really-make-things-pop">Transitions and Animations really make things pop!</h3>
<p>My favourite part of the project was making things animate and move. It’s pretty addictive once I got it working. It is a reminder that building web-based visualisations, while difficult and finicky, can absolutely create interactive and delightful experiences for the end user. When done right, web visualisations are magic.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Art is not my forte, nor my day job but I enjoyed the challenge of creating my Genuine Fake. Through this process, I have a newfound appreciation for the difficulty and satisfaction that comes from building web visualisations.</p>
<div class="tenor-gif-embed" data-postid="11831081" data-share-method="host" data-aspect-ratio="1.4218" data-width="100%">
<a href="https://tenor.com/view/artistry-at-its-finest-art-snoop-dogg-ggn-gif-11831081">Artistry At Its Finest GIF</a>from <a href="https://tenor.com/search/artistry-gifs">Artistry GIFs</a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
We must never make experiments to confirm our ideas, but simply to control them – Claude Bernard
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {Broadway {Boogie} {Woogie}},
  date = {2022-10-12},
  url = {https://www.ddanieltan.com/posts/boogiewoogie},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“Broadway Boogie Woogie.”</span> October 12,
2022. <a href="https://www.ddanieltan.com/posts/boogiewoogie">https://www.ddanieltan.com/posts/boogiewoogie</a>.
</div></div></section></div> ]]></description>
  <category>art</category>
  <category>d3</category>
  <category>randomness</category>
  <category>observable</category>
  <category>quarto</category>
  <guid>https://www.ddanieltan.com/posts/boogiewoogie/</guid>
  <pubDate>Tue, 11 Oct 2022 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/boogiewoogie/boogie.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to add some personality to your Quarto Blog</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/blogtips/</link>
  <description><![CDATA[ 



<section id="start-from-the-basics" class="level1">
<h1>Start from the basics</h1>
<p>The <a href="https://quarto.org/docs/websites/website-blog.html">basic Quarto blog</a> covers a lot of ground. Here is a detailed walkthrough of how to build a blog with Quarto conducted by Rstudio/Posit, the makers of Quarto. Just following this alone will get you started with a perfectly beautiful and functional blog. <iframe width="560" height="315" src="https://www.youtube.com/embed/CVcvXfRyfE0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>
<p>However, your blog is also your personal slice out on the internet, and if you can add just a tad bit of your personality into the content, it makes it more enjoyable for your readers. Here are my favourite tips.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>While it is fun to add these bells and whistles, do not lose focus on the most important part of your blog - the content.</p>
</div>
</div>
</section>
<section id="enrich-your-appendices" class="level1">
<h1>1. Enrich your Appendices</h1>
<p>An important facet that Quarto supports is <a href="https://quarto.org/docs/authoring/title-blocks.html">Scholarly Writing</a>. With a few simple flags in your <a href="https://github.com/ddanieltan/ddanieltan.com/blob/main/posts/_metadata.yml">_metadata.yml</a> file, you can easily configure each blog post to neatly organize your footnotes, references, license and citation information in an appendix section at the bottom of your post.</p>
<p>This <a href="https://quarto.org/docs/authoring/appendices.html">appendix section</a> is easily customizable by inserting any other information you think your reader might appreciate. 1 of the simplest things to add is a <code>Last Updated</code> section. I insert this block of code at the bottom of every post, and each time I make a change to a post and re-render, this code chunk will automatically reflect this last updated date.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource markdown number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| output: false</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Last updated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>today()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %B %y'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
</details>
</div>
<p>If you like to do more than just log a post’s last update, I recommend checking out <a href="https://blog.djnavarro.net/">Danielle Navarro’s</a> <a href="https://github.com/djnavarro/quarto-blog">source code</a> for her quarto blog for a more impressive appendix.</p>
</section>
<section id="make-custom-css-tweaks" class="level1">
<h1>2. Make custom CSS tweaks</h1>
<p>The default Quarto blog comes ready with many Bootstrap themes from the <a href="https://bootswatch.com/">Bootswatch project</a>. I found that a really efficient way to tackle styling for your blog is to start with one of these ready-made themes (I chose Litera) and then add on custom css to make small tweaks. I am consistently surprised how some seemingly small css tweaks can create a dramatic effect on your overall site.</p>
<p>I wrote this <a href="https://github.com/ddanieltan/ddanieltan.com/blob/main/custom.scss">SCSS snippet</a> following steps from <a href="https://youtu.be/ErRX8plZpQE">RappA’s youtube video</a>. This block of css helps to perfectly align the elements in my navbar with the margins of my content body. I cannot express in words how much joy this tiny tweak brings me.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource css number-lines code-with-copy"><code class="sourceCode css"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.navbar</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.container-xxl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.navbar</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.container-xl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.navbar</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.container-lg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.navbar</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.container-md</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.navbar</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.container-sm</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.navbar</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.container</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.navbar</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.container-fluid</span> {</span>
<span id="cb2-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">max-width</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1145</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<iframe src="https://giphy.com/embed/l4FB1R0Cz0gFo1YQw" width="480" height="360" frameborder="0" class="giphy-embed" allowfullscreen="">
</iframe>
<p>
<a href="https://giphy.com/gifs/spongebob-spongebob-squarepants-season-8-l4FB1R0Cz0gFo1YQw">Source: GIPHY</a>
</p>
</section>
<section id="sneak-in-easter-eggs-in-your-page-footer" class="level1 page-columns page-full">
<h1>3. Sneak in Easter Eggs in your page footer</h1>
<p>Page footers are generally reserved for important business-y messages. The usual suspects are either copyrights, licenses or “lovingly built with”s. I wanted my blog to be slightly different. I like to reward any reader who has read my posts all the way to the end with a nice easter egg in the form of one of my favourite quotes!</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Scroll down right now and find your easter-egg quote! Thank you for reading my post in its entirety 😊</p>
</div></div><div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>When I first wrote this post, I used Quarto’s <a href="https://quarto.org/docs/projects/scripts.html#pre-and-post-render">pre and post render hooks</a> to insert a new quote into the <code>page-footer</code> field of my <code>_quarto.yml</code>. But this proved clunky, because <code>_quarto.yml</code> was a project-wide config, and I wanted a different quote for every post, which meant I needed to manually trigger this pre-render hook multiple times. As of <a href="https://github.com/ddanieltan/ddanieltan.com/commit/98c069f1f97fa198fcaa065c87259abae45b72a0">this commit</a>, I opted to add my random quotes using code blocks instead.</p>
</div>
</div>
<p>I maintain a simple text file with quotes that I enjoy. I simply pick a random quote from this file, wrap the text and insert the output into <code>&lt;blockquote&gt;</code> tags like so.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource markdown number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| output: false</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> textwrap</span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../quotes.txt"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-6">    quotes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()</span>
<span id="cb3-7">quotes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [q.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> quotes]</span>
<span id="cb3-8">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(quotes)</span>
<span id="cb3-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(textwrap.wrap(res)))</span>
<span id="cb3-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
</details>
</div>
</section>
<section id="create-a-custom-404-page" class="level1">
<h1>4. Create a custom 404 page</h1>
<p>Last but not least, let’s not forget that some potential readers might land on a missing page, or use a url with a small typo. No reason to let them be greeted with a humdrum, run-of-the-mill 404 page! Quarto allows you to easily <a href="https://quarto.org/docs/websites/website-navigation.html#pages-404">customize your 404 page</a>. For <a href="https://www.ddanieltan.com/404.html">my 404 page</a>, I chose this simple image I created with DallE2.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/../404.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">DallE2 with prompt “dogs of different breeds happily running around with 404 text, cartoon style”</figcaption>
</figure>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>And there you go, hope you found a tip or two you can use. Let’s go make your personal slice of the internet your own 💪!</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

─ Python configuration ───────────────────────────────────────────────────────
 python:         /Users/ddanieltan/miniconda3/envs/py310/bin/python
 libpython:      /Users/ddanieltan/miniconda3/envs/py310/lib/libpython3.10.dylib
 pythonhome:     /Users/ddanieltan/miniconda3/envs/py310:/Users/ddanieltan/miniconda3/envs/py310
 version:        3.10.4 (main, Mar 31 2022, 03:38:35) [Clang 12.0.0 ]
 numpy:          /Users/ddanieltan/miniconda3/envs/py310/lib/python3.10/site-packages/numpy
 numpy_version:  1.21.5
 
 python versions found: 
  /usr/local/bin/python3
  /Users/ddanieltan/miniconda3/envs/py310/bin/python
  /Users/ddanieltan/miniconda3/bin/python
  /Users/ddanieltan/miniconda3/envs/dev/bin/python
  /Users/ddanieltan/miniconda3/envs/ml/bin/python
  /Users/ddanieltan/miniconda3/envs/web/bin/python

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
Somewhere, something incredible is waiting to be known – Carl Sagan
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {How to Add Some Personality to Your {Quarto} {Blog}},
  date = {2022-09-20},
  url = {https://www.ddanieltan.com/posts/blogtips},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“How to Add Some Personality to Your Quarto
Blog.”</span> September 20, 2022. <a href="https://www.ddanieltan.com/posts/blogtips">https://www.ddanieltan.com/posts/blogtips</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <guid>https://www.ddanieltan.com/posts/blogtips/</guid>
  <pubDate>Mon, 19 Sep 2022 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/404.png" medium="image" type="image/png"/>
</item>
<item>
  <title>2022: My Year of Scala</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/2022scala/</link>
  <description><![CDATA[ 



<section id="my-year-of" class="level1 page-columns page-full">
<h1>My Year of …</h1>
<p>Neil Gaiman, <a href="https://en.wikipedia.org/wiki/Neil_Gaiman_bibliography">illustrious author</a> and <a href="https://www.buzzfeed.com/amphtml/jarrylee/neil-gaiman-wins-twitter">everlasting source of wit</a>, has a really cool mental exercise to help him complete his projects.</p>
<blockquote class="blockquote">
<p>You don’t have to write. You have permission to not write, but you don’t have permission to do anything else.</p>
</blockquote>
<blockquote class="blockquote">
<p>I would go down to my lovely little gazebo at the bottom of the garden, sit down, and I’m absolutely allowed not to do anything. I’m allowed to sit at my desk, I’m allowed to stare out at the world, I’m allowed to do anything I like, as long as it isn’t anything. Not allowed to do a crossword, not allowed to read a book, not allowed to phone a friend, not allowed to make a clay model of something. All I’m allowed to do is absolutely nothing, or write.</p>
</blockquote>
<p>For a couple of years now, I have adapted a version of this exercise to help me complete my learning projects. Every year I make the grand announcement that this will be the year of X. Where X is a learning topic or a new programming language that I wish to focus on.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I declared this my year of Scala all the way back in Jan, but I only started this blog in July, which is why this post is published in September 😅.</p>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://media.giphy.com/media/YkKPc5T8mFSdqg8yTa/giphy.gif" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">🎉 2022 year is my year of Scala! 🎉</figcaption>
</figure>
</div>
<p>Inspired by Neil’s rules, my rules for this year are:</p>
<ul>
<li>For every project that requires coding, I am going to try and use Scala</li>
<li>But, I give myself permission to not use Scala if it is just not the right option for my use case</li>
<li>However, I do not have permission to try out any other shiny new programming language I might be tempted by</li>
</ul>
</section>
<section id="what-is-scala" class="level1">
<h1>What is Scala?</h1>
<p><a href="https://www.scala-lang.org/">Scala</a> is a programming language that is probably most famous for consistently showing up as one of the “Top Paying Technologies” in <a href="https://insights.stackoverflow.com/survey">StackOverflow’s annual survey</a> 🤑🤑🤑. In Data Science, Scala is famous for being the language used to build the <a href="https://spark.apache.org/">Apache Spark</a> engine, which makes Scala essentially the core language that “Enterprise Big Data<sup>TM</sup>” is run on.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource scala number-lines code-with-copy"><code class="sourceCode scala"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Illustrating Scala's legible syntax</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// and method chaining pattern</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">val</span> inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Vector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-4">inputs</span>
<span id="cb1-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//res1: Vector[Int] = Vector(6, 8)</span></span></code></pre></div>
<p>My 1-liner description of Scala (with the caveat that I am pretty much still a beginner) is that Scala feels like <strong>a language designed for modelling and manipulating data</strong>.</p>
<p>I enjoy Scala’s</p>
<ul>
<li>legible and easy-to-read syntax</li>
<li>encouraged design pattern of running an immutable data source through chains of transformations (which should be familiar to fans of <a href="https://tomaugspurger.github.io/method-chaining.html">Python’s method chaining</a> or <a href="https://style.tidyverse.org/pipes.html">R’s pipe</a>)</li>
<li>ability to give me a <a href="https://www.lihaoyi.com/post/FromFirstPrinciplesWhyScala.html">dynamic language experience with the safety of a compiled language</a></li>
<li>power/scalability out-of-the-box thanks to piggy-backing on the highly optimized JVM</li>
<li>unique features such as <a href="https://docs.scala-lang.org/tour/case-classes.html">Case Classes</a>, <a href="https://docs.scala-lang.org/overviews/core/implicit-classes.html">Implicits</a> etc. that gives the language that extra bit of black magic to set it apart</li>
</ul>
</section>
<section id="why-scala" class="level1 page-columns page-full">
<h1>Why Scala?</h1>
<p>The main reason is that I recently joined a team where our main codebase is in Scala. This gives me a practical incentive, as well as, the opportunity to be surrounded by knowledgable colleagues who I can pester with my questions.</p>
<p>The secondary reason is curiosity. Scala is designed to support both the object-oriented paradigm and the functional programming paradigm. Through Scala, I hope to dip my toes into the great ocean that is <a href="https://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Fingers crossed that one day, I’ll be able to explain what a <a href="https://www.youtube.com/watch?v=CMm98RkCgPg">monad</a> is.</p>
</div></div></section>
<section id="how-has-the-year-gone-so-far" class="level1">
<h1>How has the year gone so far?</h1>
<p>Pretty good! I have not burnt out and I have found opportunities to use Scala in my projects for work, school and play. So far I have used Scala to:</p>
<ol type="1">
<li><p>Write applications to improve my tooling for work</p></li>
<li><p>Build random number generators for a module for school</p></li>
<li><p>Create a rudimentary (and incomplete) <a href="https://github.com/ddanieltan/scalaBlog">blog engine</a></p></li>
<li><p>Inch my way through the excellent <a href="https://www.handsonscala.com/">Hands-on Scala</a> book</p></li>
<li><p>Automate small scripting tasks (although I’m still not convinced Scala is my 1st choice as a scripting language)</p></li>
<li><p>Build a simple website without writing 1 line of javascript (😲!!) thanks to <a href="https://www.scala-js.org/">Scala.js</a></p></li>
</ol>
<p>Additionally, I have also found small ways to engage with the small but fascinating community. For example, I enjoyed learning a little history behind Scala by asking the Reddit community <a href="https://www.reddit.com/r/scala/comments/smq3t2/whats_the_story_behind_scalas_logo/">What’s the story behind Scala’s logo?</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/2022scala/scalaLogo.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">My rendition of Scala’s logo. What does this look like to you?</figcaption>
</figure>
</div>
</section>
<section id="ending-the-year-strong" class="level1">
<h1>Ending the year strong</h1>
<p>I still have a good couple of months until the end of 2022. I would like to accomplish the following before the end of this year:</p>
<ul>
<li>Build a Scala application which serves more users than just myself</li>
<li>Attempt this year’s <a href="https://adventofcode.com/">Advent of Code</a> in Scala</li>
<li>Write a recap blog post at the end of the year reflecting what I liked/disliked about Scala</li>
</ul>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
We are not given a short life but we make it short,we are not ill-supplied but wasteful of it. Life is long if you know how to use it. – Seneca
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {2022: {My} {Year} of {Scala}},
  date = {2022-09-15},
  url = {https://www.ddanieltan.com/posts/2022scala},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“2022: My Year of Scala.”</span> September 15,
2022. <a href="https://www.ddanieltan.com/posts/2022scala">https://www.ddanieltan.com/posts/2022scala</a>.
</div></div></section></div> ]]></description>
  <category>scala</category>
  <category>learning</category>
  <guid>https://www.ddanieltan.com/posts/2022scala/</guid>
  <pubDate>Wed, 14 Sep 2022 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/2022scala/scalaLogo.png" medium="image" type="image/png" height="193" width="144"/>
</item>
<item>
  <title>How I sync my config files with Stow</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/stow/</link>
  <description><![CDATA[ 



<section id="an-organisational-nightmare" class="level1">
<h1>An organisational nightmare</h1>
<p>I have one machine for work, one machine for personal stuff and a bunch of servers for projects and school work. As I hop in and out of these separate computing systems, it gets pretty difficult to synchronise all my config files, settings, scripts and shortcuts.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/stow/organized.png" class="img-fluid figure-img" width="512"></p>
<figcaption class="figure-caption"><a href="https://openai.com/dall-e-2/">DallE2</a> art with prompt: ‘Keeping things organized across multiple machines, digital art’</figcaption>
</figure>
</div>
</div>
</div>
<p>1As this is a common problem that plagues many programmers, it is unsurprising that there is a clever piece of software written to solve this problem - <a href="https://www.gnu.org/software/stow/">Stow</a>. Stow is a symlink manager that when coupled with any version control software (ie. git) can create a simple and effective config sync system. I have used such a system for the last couple of months and is something I can no longer live without.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
When you’ve written the same code 3 times, write a function<br><br>When you’ve given the same in-person advice 3 times, write a blog post
</p>
— David Robinson (<span class="citation" data-cites="drob">@drob</span>) <a href="https://twitter.com/drob/status/928447584712253440?ref_src=twsrc%5Etfw">November 9, 2017</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I find myself bringing up Stow pretty often in conversations so I wanted to take <span class="citation" data-cites="drob">@drob</span>’s advice. However, as there are <a href="https://dr563105.github.io/blog/manage-dotfiles-with-gnu-stow/">many</a> <a href="https://alexpearce.me/2016/02/managing-dotfiles-with-stow/">excellent</a> <a href="https://venthur.de/2021-12-19-managing-dotfiles-with-stow.html">blogs</a> that already do a great job explaining what Stow is, I think I can’t add much value to that conversation. Instead, I’m going to shift my energy toward creating a straightforward how-to recipe.</p>
</section>
<section id="the-big-picture" class="level1">
<h1>The Big Picture</h1>
<p>Here is the big picture of how a Stow-enabled config synchronisation system is set up.</p>
<ol type="1">
<li><p>You will need a <code>dotfiles</code> version-controlled repository. The simplest approach here would be to create a <a href="https://docs.github.com/en/get-started/quickstart/create-a-repo">Github repository</a></p></li>
<li><p>In <code>dotfiles</code>, you will create separate folders for each application’s config file you wish to keep in sync. What you name these folders is totally up to you, but conventionally most people name the folder after the application</p></li>
</ol>
<p>For example, a simple <code>dotfiles</code> repo might look like this.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> aliases</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> kitty</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> nvim</span></code></pre></div>
<p>Here, I intend to sync my shell aliases, terminal configs (<a href="https://sw.kovidgoyal.net/kitty/">Kitty</a>) and editor configs (<a href="https://neovim.io/">NeoVim</a>), so I create a separate folder for each.</p>
<ol start="3" type="1">
<li><p>Within each folder, you can create the config files that we want to be kept in-sync</p></li>
<li><p>Using Stow, you can then create a symlink of these config files which would be placed in the right locations on your file system for the respective applications to read from</p></li>
<li><p>Once this is set up, the day-to-day usage of this system is incredibly simple. Any time you make make edits to your config files on 1 machine, you simply need to commit and push the changes made in your <code>dotfiles</code> repo. Your config files are symlink-ed to the files in your <code>dotfiles</code> repo, and any edit you make will be updated. Next time you hop into a different machine, just pull down the latest changes in the <code>dotfiles</code> repo and all your configs will be updated</p></li>
</ol>
<p>Steps 3 and 4 are the tricky bits and I provide a more detailed example of them below.</p>
</section>
<section id="syncing-a-config-file-for-the-1st-time" class="level1 page-columns page-full">
<h1>Syncing a config file for the 1st time</h1>
<p>Here is an example scenario. I have 2 machines (A and B), and I want to sync the configurations for the terminal application, e.g.&nbsp;the <a href="https://sw.kovidgoyal.net/kitty/">Kitty</a> terminal. To configure this terminal, you would edit a config file <code>kitty.conf</code> whose default location is <code>~/.config/kitty/kitty.conf</code>. Here is what you would do:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Yes, I see the irony in using Kitty because it is a GPU-accelerated application whose primary function is to print out text…</p>
</div></div><ol type="1">
<li><p>We start from machine A. Firstly, you will need to delete the existing <code>kitty.conf</code> file</p></li>
<li><p>In your <code>dotfiles</code> repo, within the <code>kitty</code> folder, create a new <code>kitty.conf</code> file but make sure this file is in the same folder structure of the default config location. I.e. your new config file should sit in the <code>dotfiles</code> repo like this</p></li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> aliases</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> kitty</span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── .config</span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       └── kitty</span>
<span id="cb2-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>           └── kitty.conf</span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> nvim</span></code></pre></div>
<ol start="3" type="1">
<li><p>Fill up <code>kitty.conf</code> with your desired settings</p></li>
<li><p>Navigate back up to the <code>dotfiles</code> repo and run <code>stow kitty</code>. This command will create a symlink of the contents of the kitty folder, which will create a <code>kitty.conf</code> in the <code>~/.config/kitty/kitty.conf</code> location</p></li>
<li><p>We are done setting up on Machine A. Commit and push the changes to your <code>dotfiles</code> repo</p></li>
<li><p>Finally, log into Machine B. Pull down the changes and because we have not run stow in this machine, you will need to run <code>stow kitty</code> here too to create the symlinks.</p></li>
</ol>
<p>Stow is something you only need to run the 1st time you add a config file. You do not have to run <code>stow</code> for any subsequent edits.</p>
</section>
<section id="limitations" class="level1">
<h1>Limitations</h1>
<p>This config sync system is pretty sweet but it is not without some limitations. Here is a couple for you to be aware of.</p>
<p>Stowing too many config files can also get out of hand pretty quickly. You probably want to consider which applications you are genuinely using often enough across multiple machines, just so you avoid creating obsolete symlinks.</p>
<p>Additionally, there are some situations where you do not want config files synced. For example, I do not use this system to sync my shell configs because my shell configs might contain sensitive environment variables or have settings unique to the type of hardware the software is running on.</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
Study hard what interests you the most in the most undisciplined, irreverent and original manner possible – Richard Feynman
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {How {I} Sync My Config Files with {Stow}},
  date = {2022-08-27},
  url = {https://www.ddanieltan.com/posts/stow},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“How I Sync My Config Files with Stow.”</span>
August 27, 2022. <a href="https://www.ddanieltan.com/posts/stow">https://www.ddanieltan.com/posts/stow</a>.
</div></div></section></div> ]]></description>
  <category>tooling</category>
  <guid>https://www.ddanieltan.com/posts/stow/</guid>
  <pubDate>Fri, 26 Aug 2022 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/stow/organized.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Explainers: Inverse Transform Theorem</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/some2/</link>
  <description><![CDATA[ 



<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This post is my submission to 2022’s Summer of Math Exposition 2 (SoME2), a competition encouraging people all around the world to create expository content on their favourite math topics during the summer. I thoroughly enjoyed learning from the <a href="https://www.youtube.com/playlist?list=PLnQX-jgAF5pTkwtUuVpqS5tuWmJ-6ZM-Z">submissions from SoME1</a>, and thought to scrape my spare time together this year to submit something for SoME2.</p>
<p>You can learn more about #SoME2 from <a href="https://youtu.be/hZuYICAEN9Y">Grant Sanderson’s(3B1B) video</a>.</p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">utf8ToInt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SoME2"</span>)))</span></code></pre></div>
</details>
</div>
<section id="worlds-at-our-fingertips" class="level1 page-columns page-full">
<h1>Worlds at our fingertips</h1>
<p>Modern day computers are pretty amazing simulation machines.</p>
<p>Here’s an example. Say that I am a <a href="https://www.wikihow.com/Do-the-Water-Bottle-Flipping-Challenge">Bottle Flipping</a> enthusiast and I am eager to simulate 100 bottle flips. To simulate flipping a bottle 100 times, I could instruct my computer to provide 100 simulations. At a technical level, I am modelling bottle flipping as a <a href="https://en.wikipedia.org/wiki/Binomial_distribution">binomial distribution</a>, and for my simulation I am generating 100 random variates from that distribution.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb2-1">totalFlips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-2">prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Took me 5 tries to flip the bottle once</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(totalFlips, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, prob) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 represents a successful flip</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 1 0 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0
 [38] 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0
 [75] 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Yes, 🙄 I know bottle flipping was a trend way back in <a href="https://www.quora.com/What-are-the-origins-of-bottle-flipping-How-did-its-popularity-spread">2016</a>. I needed a success/failure example and it was either this of “coin flips” which I could not bring myself to use</p>
</div></div><p>Or, say I’m a sports fan and my football team scores an average of 1 goal per game. I could simulate the goals scored over 100 games, by modelling the goals scored by my team after a <a href="https://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution</a>, and once again, run my simulation by generating 100 random variates from this distribution.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb4-1">totalGames <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-2">avgGoalsPerGame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(totalGames, avgGoalsPerGame)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0 1 2 1 2 2 0 0 1 2 2 0 1 0 1 3 2 2 1 1 2 1 1 1 1 0 4 3 1 0 0 0 2 1 0 1 0
 [38] 0 2 2 1 0 3 1 3 0 0 0 1 1 2 2 1 2 2 0 2 2 0 0 0 1 0 0 2 1 1 2 2 0 3 0 0 0
 [75] 0 0 0 1 1 2 1 2 0 1 3 1 2 0 0 2 2 0 2 1 0 0 2 2 1 1</code></pre>
</div>
</div>
<p>You get the gist. From models using a single distribution to ones using complex combinations of distributions, our ability to generate random variates allows us to simulate almost any scenario we can think of!</p>
</section>
<section id="how-random-variates-are-generated" class="level1">
<h1>How random variates are generated</h1>
<p>But, how do computers even produce these random variates? Surely, there can’t be a specialised function for every one of the infinite distributions out in the world. It turns out that computers have a very simple solution in the form of two ingredients - a pseudorandom uniform generator and the inverse transform theorem.</p>
<p>A pseudoranom uniform generator is an algorithm that produces random variates from a <img src="https://latex.codecogs.com/png.latex?Unif~(0,1)"> distribution, producing uniformly random numbers between 0 and 1. There are many different algorithms that can produce uniform random variates and they are judged on how well they can come close to a perfectly random generator. The assortment of different uniform generators each with their pros and cons are interesting, but that will not be the focus of today’s post. Today, I want to focus on the 2nd ingredient, the inverse transform theorem.</p>
</section>
<section id="inverse-transform-theorem" class="level1">
<h1>Inverse Transform Theorem</h1>
<p>The Inverse Transform Theorem is the backbone behind <a href="https://en.wikipedia.org/wiki/Inverse_transform_sampling">Inverse Transform Sampling</a>, and is how a uniform distribution is transformed to a diverse range of other distributions.</p>
<p>My biggest challenge when I first encountered this theorem was to grasp the key idea behind its simplicity. Here is the theorem:</p>
<blockquote class="blockquote">
<p>Let <img src="https://latex.codecogs.com/png.latex?X"> be a continuous random variable with c.d.f <img src="https://latex.codecogs.com/png.latex?F(x)">. Then <img src="https://latex.codecogs.com/png.latex?F(X)%20%5Csim%20Unif(0,1)">.</p>
</blockquote>
<p>And, here’s the equally perplexing simple proof:</p>
<blockquote class="blockquote">
<p>Let <img src="https://latex.codecogs.com/png.latex?Y%20=%20F(X)"> and suppose that <img src="https://latex.codecogs.com/png.latex?Y"> has a c.d.f <img src="https://latex.codecogs.com/png.latex?G(y)">, then <img src="https://latex.codecogs.com/png.latex?G(y)%20=%20P(Y%20%5Cleq%20y)%20=%20P(F(Y)%20%5Cleq%20y)%20"> <img src="https://latex.codecogs.com/png.latex?%20=%20P(X%20%5Cleq%20F%5E%7B-1%7D(y))%20=%20F(F%5E%7B-1%7D(y))%20=%20y"></p>
</blockquote>
<p>Let me explain the mechanics of the theorem. This theorem simply states that given we have a cumulative density function of a continuous random variable, the inverse of the CDF function will produce a Uniform distribution. While the usage of the theorem reads like a straight forward recipe, I had so many questions about why the theorem works:</p>
<ul>
<li>Why is the theorem and proof so simple?</li>
<li>How could this theorem be universally true for any distribution?</li>
<li>Why did the theorem introduce the cumulative density function seemingly out of nowhere?</li>
</ul>
</section>
<section id="visual-connection" class="level1">
<h1>Visual connection</h1>
<p>And what I see as a recurring theme amongst SoME submissions, is that for many mathematical concepts that appear hard to understand in written form, we can achieve some clarity by expressing the ideas in visual form. Here is my go at it.</p>
<p>Here are a number of cumulative density functions for an assortment of distributions.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb6-1">normal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pnorm</span>
<span id="cb6-2">logNormal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plnorm</span>
<span id="cb6-3">exponential <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pexp</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> pnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> logNormal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brown"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> exponential, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CDFs from an assortment of distributions"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.ddanieltan.com/posts/some2/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Despite coming in every imaginable shape and size, CDFs for any function have 1 similarity. Their output (y-axis) will always be bound between 0 and 1. This makes a lot of sense when we consider that the CDF is characterised for being a <em>monotonic increasing</em> function. The CDF graphs the probability of <img src="https://latex.codecogs.com/png.latex?P(X%3Cx)">, given that the output is a probability, the Y axis will always be bounded between 0 and 1. This property is very useful when we match it back to the <img src="https://latex.codecogs.com/png.latex?Unif(0,1)"> distribution. A uniform distribution produces random variates similarly bound between 0 and 1.</p>
<p>The last piece of the puzzle is to understand that just as a function <img src="https://latex.codecogs.com/png.latex?F(x)"> can be visually described as a transformation mapping values from the X axis to values on the Y axis, and the inverse of that said function <img src="https://latex.codecogs.com/png.latex?F%5E%7B-1%7D(x)"> is simply the inverse transformation mapping values from the Y axis to the X axis.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/some2/inverse.png" class="img-fluid figure-img" width="882"></p>
<figcaption class="figure-caption">What the inverse function means</figcaption>
</figure>
</div>
</div>
</div>
<p>So putting all the pieces together, this is how the Inverse Transform Theorem is put into action:</p>
<ul>
<li><p>The <img src="https://latex.codecogs.com/png.latex?Unif(0,1)"> distribution produces a random uniform between 0 and 1</p></li>
<li><p>This is akin to picking a random point on the Y axis of a CDF for your distribution of interest</p></li>
<li><p>The inverse function <img src="https://latex.codecogs.com/png.latex?F%5E%7B-1%7D(x)"> maps the random uniform on the Y axis to a value on the X axis</p></li>
<li><p>And this X axis value in turn becomes a random variate from your distribution of interest</p></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The Inverse Transform Theorem is a remarkable piece of math that links the uniform distribution to just about any other distribution we could think of. It’s a crucial piece in the machinery of modern machines that enable us to run simulations, and I hope this post helps to share the visual a-ha intuition I experienced when I was learning about this topic.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/some2/midjourney.png" class="img-fluid figure-img" width="256"></p>
<figcaption class="figure-caption"><a href="https://www.midjourney.com/home/">Midjourney</a> AI Art with the prompt of ‘Inverse Transform Theorem’</figcaption>
</figure>
</div>
</div>
</div>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 ! package     * version date (UTC) lib source
 P dplyr       * 1.1.2   2023-04-20 [?] CRAN (R 4.3.0)
 P forcats     * 1.0.0   2023-01-29 [?] CRAN (R 4.3.0)
 P ggplot2     * 3.4.2   2023-04-03 [?] CRAN (R 4.3.0)
 P lubridate   * 1.9.2   2023-02-10 [?] CRAN (R 4.3.0)
 P purrr       * 1.0.1   2023-01-10 [?] CRAN (R 4.3.0)
 P readr       * 2.1.4   2023-02-10 [?] CRAN (R 4.3.0)
   sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)
 P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.3.0)
 P tibble      * 3.2.1   2023-03-20 [?] CRAN (R 4.3.0)
 P tidyr       * 1.3.0   2023-01-24 [?] CRAN (R 4.3.0)
 P tidyverse   * 2.0.0   2023-02-22 [?] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

 P ── Loaded and on-disk path mismatch.

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
The reward for good work is more work – Tom Sach
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {Explainers: {Inverse} {Transform} {Theorem}},
  date = {2022-08-08},
  url = {https://www.ddanieltan.com/posts/some2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“Explainers: Inverse Transform Theorem.”</span>
August 8, 2022. <a href="https://www.ddanieltan.com/posts/some2">https://www.ddanieltan.com/posts/some2</a>.
</div></div></section></div> ]]></description>
  <category>explainers</category>
  <category>R</category>
  <category>simulation</category>
  <category>randomness</category>
  <guid>https://www.ddanieltan.com/posts/some2/</guid>
  <pubDate>Sun, 07 Aug 2022 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/some2/midjourney.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Hello world</title>
  <dc:creator>Daniel Tan</dc:creator>
  <link>https://www.ddanieltan.com/posts/helloworld/</link>
  <description><![CDATA[ 



<section id="welcome-to-my-blog" class="level1">
<h1>Welcome to my blog</h1>
<p>I started this blog to have a place on the internet where I can practice and publish my writing. Writing has been a very remarkable tool for both my professional and personal life. It helps me to organise my thoughts, maximise my impact and reflect on my learnings. Yet, I have consistently not prioritised writing and it is a disservice to myself that I have not made set aside time for deliberate practice.</p>
<p>I have started and abandoned more blogs than I can remember, so I always start a new blogging project with some apprehension. But, as mentioned above, writing is too important for me to not try again.</p>
<p>Here’s to another shot at this. Wish me luck!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ddanieltan.com/posts/helloworld/quartoWorld.png" class="img-fluid figure-img" width="626"></p>
<figcaption class="figure-caption">My visualisation of Hello world + Quarto logo</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="quarto" class="level1 page-columns page-full">
<h1>Quarto</h1>
<p>One reason why I got tempted to start a blog again is <a href="https://quarto.org/">Quarto</a>! Quarto is the shiny, new publishing framework (from <del>RStudio</del><a href="https://posit.co/">Posit</a>) that I use to publish this blog. Quarto is reminiscent of Rmarkdown, but rebuilt around the pandoc engine. Quarto feels purpose built for the entire data community, supporting all the major Data Science languages (Python, R, Julia, Javascript), and supporting a wide spectrum of output formats (pdf reports, websites, presentations and more).</p>
<p>You can see my unbridled enthusiasm after first learning about Quarto here.</p>
<p align="center">
<iframe src="https://www.linkedin.com/embed/feed/update/urn:li:share:6943566445809152000" height="726" width="504" frameborder="0" allowfullscreen="" title="Embedded post">
</iframe>
</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>…along with my “this-is-a-huge-moment-in-history” hyperbole</p>
</div></div></section>
<section id="jumpstarting-this-blog" class="level1">
<h1>Jumpstarting this blog</h1>
<p>These were the best resources I found online to help me jump start this blog.</p>
<section id="official-quarto-documentation-website-and-repos" class="level4">
<h4 class="anchored" data-anchor-id="official-quarto-documentation-website-and-repos">1. Official Quarto Documentation (<a href="https://quarto.org/">website</a> and <a href="https://github.com/quarto-dev">repos</a>)</h4>
<p>The official docs are extensive and well-written. Specific to building a blog, I frequently find myself on the <a href="https://quarto.org/docs/websites/">website page</a>, <a href="https://quarto.org/docs/publishing/">publishing page</a> or thumbing through their <a href="https://quarto.org/docs/gallery/">gallery</a> for inspiration.</p>
</section>
<section id="danielle-navarros-porting-a-distill-blog-to-quarto-blog-and-repo" class="level4">
<h4 class="anchored" data-anchor-id="danielle-navarros-porting-a-distill-blog-to-quarto-blog-and-repo">2. Danielle Navarro’s “Porting a Distill Blog to Quarto” (<a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/">blog</a> and <a href="https://github.com/djnavarro/quarto-blog">repo</a>)</h4>
<p>Danielle’s blog post is the perfect starting template. I found her recommended YAML settings, blog theme and deployment instructions very sensible and well-suited for a blog.</p>
</section>
<section id="the-small-but-growing-collection-of-quarto-content-online" class="level4">
<h4 class="anchored" data-anchor-id="the-small-but-growing-collection-of-quarto-content-online">3. The small but growing collection of Quarto content online</h4>
<p>At the time of writing, I did not find a large collection of Quarto-specific content online. Nevertheless, I did find some helpful gems from <a href="https://www.youtube.com/results?search_query=quarto+blog">Youtube videos</a>, <a href="https://github.com/quarto-dev/quarto-cli/discussions">Github discussions</a> or <a href="https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/">websites</a> that had a helpful tip or two that I could use for my blog.</p>
<!--
Adapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd
-->
</section>

</section>

<div id="quarto-appendix" class="default"><section id="appendix" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Appendix</h2><div class="quarto-appendix-contents">

<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand for Session Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       macOS Ventura 13.5
 system   x86_64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Asia/Singapore
 date     2023-08-10
 pandoc   3.1.6 @ /usr/local/bin/ (via rmarkdown)
 quarto   1.3.433

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)

 [1] /Users/ddanieltan/Code/ddanieltan.com/renv/library/R-4.3/x86_64-apple-darwin20
 [2] /Users/ddanieltan/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/84ba8b13

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
If your experiment needs statistics, you ought to have done a better experiment – Ernest Rutherford
</blockquote>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{tan2022,
  author = {Tan, Daniel},
  title = {Hello World},
  date = {2022-07-15},
  url = {https://www.ddanieltan.com/posts/helloworld},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-tan2022" class="csl-entry quarto-appendix-citeas">
Tan, Daniel. 2022. <span>“Hello World.”</span> July 15, 2022. <a href="https://www.ddanieltan.com/posts/helloworld">https://www.ddanieltan.com/posts/helloworld</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <guid>https://www.ddanieltan.com/posts/helloworld/</guid>
  <pubDate>Thu, 14 Jul 2022 16:00:00 GMT</pubDate>
  <media:content url="https://www.ddanieltan.com/posts/helloworld/quartoWorld.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
